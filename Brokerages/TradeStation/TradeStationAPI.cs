//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.13.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;

namespace QuantConnect.Brokerages.TradeStation
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.13.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class TradeStationClient
    {
        private string _baseUrl = "https://api.tradestation.com/v2";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TradeStationClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Get Symbol Info</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol">Symbol to lookup</param>
        /// <returns>symbol response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SymbolDefinition> GetSymbolAsync(string access_token, string symbol)
        {
            return GetSymbolAsync(access_token, symbol, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Symbol Info</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol">Symbol to lookup</param>
        /// <returns>symbol response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SymbolDefinition> GetSymbolAsync(string access_token, string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbol/{symbol}?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json;"));// charset=utf-8"));
                    //request_.Headers.Accept.Add()


                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(SymbolDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SymbolDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SymbolDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Suggest Symbols</summary>
        /// <param name="top">The top number of results to return</param>
        /// <param name="filter">An OData filter to apply to the results</param>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="text">Symbol text for suggestion</param>
        /// <returns>symbol suggest response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> SuggestsymbolsAsync(int top, string filter, string access_token, string text)
        {
            return SuggestsymbolsAsync(top, filter, access_token, text, System.Threading.CancellationToken.None);
        }

        /// <summary>Suggest Symbols</summary>
        /// <param name="top">The top number of results to return</param>
        /// <param name="filter">An OData filter to apply to the results</param>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="text">Symbol text for suggestion</param>
        /// <returns>symbol suggest response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous>> SuggestsymbolsAsync(int top, string filter, string access_token, string text, System.Threading.CancellationToken cancellationToken)
        {
            if (text == null)
                throw new System.ArgumentNullException("text");

            if (top == null)
                throw new System.ArgumentNullException("top");

            if (filter == null)
                throw new System.ArgumentNullException("filter");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbols/suggest/{text}?");
            urlBuilder_.Replace("{text}", System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("$top=").Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("$filter=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Search for Symbols</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="criteria">Criteria are represented as Key/value pairs (`&` separated):
        /// 
        /// `N`: Name of Symbol. (Optional)
        /// 
        /// `C`: Asset categories. (Optional) Possible values:
        ///   - `Future` or `FU`
        ///   - `FutureOption` or `FO`
        ///   - `Stock` or `S` (Default)
        ///   - `StockOption` or `SO` (If root is specified, default category)
        ///   - `Index` or `IDX`
        ///   - `CurrencyOption` or `CO`
        ///   - `MutualFund` or `MF`
        ///   - `MoneyMarketFund` or `MMF`
        ///   - `IndexOption` or `IO`
        ///   - `Bond` or `B`
        ///   - `Forex` or `FX`
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Equities Lookups:
        /// 
        /// `N`: partial/full symbol name, will return all symbols that contain the provided name value
        /// 
        /// `Desc`: Name of the company
        /// 
        /// `Flg`: indicates whether symbols no longer trading should be included in the results returned. (Optional) This criteria is not returned in the symbol data. Possible values:
        ///   - `true`
        ///   - `false` (Default)
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Options Lookups:
        /// (Category=StockOption, IndexOption, FutureOption or CurrencyOption)
        /// 
        /// `R`: Symbol root. Required field, the symbol the option is a derivative of, this search will not return options based on a partial root.
        /// 
        /// `Stk`: Number of strikes prices above and below the underlying price
        ///   - Default value 3
        /// 
        /// `Spl`: Strike price low
        /// 
        /// `Sph`: Strike price high
        /// 
        /// `Exd`: Number of expiration dates.
        ///   - Default value 3
        /// 
        /// `Edl`: Expiration date low, ex: 01-05-2011
        /// 
        /// `Edh`: Expiration date high, ex: 01-20-2011
        /// 
        /// `OT`: Option type. Possible values:
        ///   - `Both` (Default)
        ///   - `Call`
        ///   - `Put`
        /// 
        /// `FT`: Future type for FutureOptions. Possible values:
        ///   - `Electronic` (Default)
        ///   - `Pit`
        /// 
        /// `ST`: Symbol type: Possible values:
        ///   - `Both`
        ///   - `Composite` (Default)
        ///   - `Regional`
        /// 
        /// #### For Futures Lookups:
        /// (Category = Future)
        /// 
        /// `Desc`: Description of symbol traded
        /// 
        /// `R`: Symbol root future trades
        /// 
        /// `FT`: Futures type. Possible values:
        ///   - `None`
        ///   - `PIT`
        ///   - `Electronic` (Default)
        ///   - `Combined`
        /// 
        /// `Cur`: Currency. Possible values:
        ///   - `All`
        ///   - `USD` (Default)
        ///   - `AUD`
        ///   - `CAD`
        ///   - `CHF`
        ///   - `DKK`
        ///   - `EUR`
        ///   - `DBP`
        ///   - `HKD`
        ///   - `JPY`
        ///   - `NOK`
        ///   - `NZD`
        ///   - `SEK`
        ///   - `SGD`
        /// 
        /// `Exp`: whether to include expired contracts
        ///   - `false` (Default)
        ///   - `true`
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Forex Lookups:
        /// 
        /// `N`: partial/full symbol name. Use all or null for a list of all forex symbols
        /// 
        /// `Desc`: Description
        /// 
        /// Note:
        ///   - The exchange returned for all forex searches will be `FX`
        ///   - The country returned for all forex searches will be `FOREX`</param>
        /// <returns>symbol search response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous2>> SearchSymbolsAsync(string access_token, string criteria)
        {
            return SearchSymbolsAsync(access_token, criteria, System.Threading.CancellationToken.None);
        }

        /// <summary>Search for Symbols</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="criteria">Criteria are represented as Key/value pairs (`&` separated):
        /// 
        /// `N`: Name of Symbol. (Optional)
        /// 
        /// `C`: Asset categories. (Optional) Possible values:
        ///   - `Future` or `FU`
        ///   - `FutureOption` or `FO`
        ///   - `Stock` or `S` (Default)
        ///   - `StockOption` or `SO` (If root is specified, default category)
        ///   - `Index` or `IDX`
        ///   - `CurrencyOption` or `CO`
        ///   - `MutualFund` or `MF`
        ///   - `MoneyMarketFund` or `MMF`
        ///   - `IndexOption` or `IO`
        ///   - `Bond` or `B`
        ///   - `Forex` or `FX`
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Equities Lookups:
        /// 
        /// `N`: partial/full symbol name, will return all symbols that contain the provided name value
        /// 
        /// `Desc`: Name of the company
        /// 
        /// `Flg`: indicates whether symbols no longer trading should be included in the results returned. (Optional) This criteria is not returned in the symbol data. Possible values:
        ///   - `true`
        ///   - `false` (Default)
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Options Lookups:
        /// (Category=StockOption, IndexOption, FutureOption or CurrencyOption)
        /// 
        /// `R`: Symbol root. Required field, the symbol the option is a derivative of, this search will not return options based on a partial root.
        /// 
        /// `Stk`: Number of strikes prices above and below the underlying price
        ///   - Default value 3
        /// 
        /// `Spl`: Strike price low
        /// 
        /// `Sph`: Strike price high
        /// 
        /// `Exd`: Number of expiration dates.
        ///   - Default value 3
        /// 
        /// `Edl`: Expiration date low, ex: 01-05-2011
        /// 
        /// `Edh`: Expiration date high, ex: 01-20-2011
        /// 
        /// `OT`: Option type. Possible values:
        ///   - `Both` (Default)
        ///   - `Call`
        ///   - `Put`
        /// 
        /// `FT`: Future type for FutureOptions. Possible values:
        ///   - `Electronic` (Default)
        ///   - `Pit`
        /// 
        /// `ST`: Symbol type: Possible values:
        ///   - `Both`
        ///   - `Composite` (Default)
        ///   - `Regional`
        /// 
        /// #### For Futures Lookups:
        /// (Category = Future)
        /// 
        /// `Desc`: Description of symbol traded
        /// 
        /// `R`: Symbol root future trades
        /// 
        /// `FT`: Futures type. Possible values:
        ///   - `None`
        ///   - `PIT`
        ///   - `Electronic` (Default)
        ///   - `Combined`
        /// 
        /// `Cur`: Currency. Possible values:
        ///   - `All`
        ///   - `USD` (Default)
        ///   - `AUD`
        ///   - `CAD`
        ///   - `CHF`
        ///   - `DKK`
        ///   - `EUR`
        ///   - `DBP`
        ///   - `HKD`
        ///   - `JPY`
        ///   - `NOK`
        ///   - `NZD`
        ///   - `SEK`
        ///   - `SGD`
        /// 
        /// `Exp`: whether to include expired contracts
        ///   - `false` (Default)
        ///   - `true`
        /// 
        /// `Cnt`: Country where the symbol is traded in. (Optional) Possible values:
        ///   - `ALL` if not presented (Default)
        ///   - `US`
        ///   - `DE`
        ///   - `CA`
        /// 
        /// #### For Forex Lookups:
        /// 
        /// `N`: partial/full symbol name. Use all or null for a list of all forex symbols
        /// 
        /// `Desc`: Description
        /// 
        /// Note:
        ///   - The exchange returned for all forex searches will be `FX`
        ///   - The country returned for all forex searches will be `FOREX`</param>
        /// <returns>symbol search response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous2>> SearchSymbolsAsync(string access_token, string criteria, System.Threading.CancellationToken cancellationToken)
        {
            if (criteria == null)
                throw new System.ArgumentNullException("criteria");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbols/search/{criteria}?");
            urlBuilder_.Replace("{criteria}", System.Uri.EscapeDataString(ConvertToString(criteria, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous2>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous2>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous2>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Quote</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <returns>Quote response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> GetQuotesAsync(string access_token, string symbols)
        {
            return GetQuotesAsync(access_token, symbols, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Quote</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <returns>Quote response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous3>> GetQuotesAsync(string access_token, string symbols, System.Threading.CancellationToken cancellationToken)
        {
            if (symbols == null)
                throw new System.ArgumentNullException("symbols");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/quote/{symbols}?");
            urlBuilder_.Replace("{symbols}", System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous3>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous3>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream Quote Changes</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <param name="transfer_Encoding">a header with the value of `Chunked` must be passed to streaming resources</param>
        /// <returns>Quote Stream response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QuoteStreamDefinition> StreamQuotesChangesAsync(string access_token, string symbols, TransferEncoding transfer_Encoding)
        {
            return StreamQuotesChangesAsync(access_token, symbols, transfer_Encoding, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream Quote Changes</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <param name="transfer_Encoding">a header with the value of `Chunked` must be passed to streaming resources</param>
        /// <returns>Quote Stream response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<QuoteStreamDefinition> StreamQuotesChangesAsync(string access_token, string symbols, TransferEncoding transfer_Encoding, System.Threading.CancellationToken cancellationToken)
        {
            if (symbols == null)
                throw new System.ArgumentNullException("symbols");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/quote/changes/{symbols}?");
            urlBuilder_.Replace("{symbols}", System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (transfer_Encoding == null)
                        throw new System.ArgumentNullException("transfer_Encoding");
                    request_.Headers.TryAddWithoutValidation("Transfer-Encoding", ConvertToString(transfer_Encoding, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(QuoteStreamDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<QuoteStreamDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QuoteStreamDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream Quote Snapshots</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <returns>Quote Stream response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QuoteStreamDefinition> StreamQuotesSnapshotsAsync(string access_token, string symbols)
        {
            return StreamQuotesSnapshotsAsync(access_token, symbols, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream Quote Snapshots</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbols">1 or more Symbol Names (comma-separated)</param>
        /// <returns>Quote Stream response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<QuoteStreamDefinition> StreamQuotesSnapshotsAsync(string access_token, string symbols, System.Threading.CancellationToken cancellationToken)
        {
            if (symbols == null)
                throw new System.ArgumentNullException("symbols");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/quote/snapshots/{symbols}?");
            urlBuilder_.Replace("{symbols}", System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(QuoteStreamDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<QuoteStreamDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QuoteStreamDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream BarChart - Starting on Date</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="startDate">The starting date to begin streaming bars from. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsFromStartDateAsync(string access_token, SessionTemplate? sessionTemplate, string symbol, int interval, Unit unit, string startDate)
        {
            return StreamBarchartsFromStartDateAsync(access_token, sessionTemplate, symbol, interval, unit, startDate, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream BarChart - Starting on Date</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="startDate">The starting date to begin streaming bars from. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsFromStartDateAsync(string access_token, SessionTemplate? sessionTemplate, string symbol, int interval, Unit unit, string startDate, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            if (unit == null)
                throw new System.ArgumentNullException("unit");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/barchart/{symbol}/{interval}/{unit}/{startDate}?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interval}", System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{unit}", System.Uri.EscapeDataString(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{startDate}", System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sessionTemplate != null) urlBuilder_.Append("SessionTemplate=").Append(System.Uri.EscapeDataString(ConvertToString(sessionTemplate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError400);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError400>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError400>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError404);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError404>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError404>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BarchartDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream BarChart - Date Range</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="startDate">The starting date to begin streaming bars from. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <param name="endDate">The ending date for bars streamed. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsFromStartDateToEndDateAsync(string access_token, SessionTemplate2? sessionTemplate, string symbol, int interval, Unit2 unit, string startDate, string endDate)
        {
            return StreamBarchartsFromStartDateToEndDateAsync(access_token, sessionTemplate, symbol, interval, unit, startDate, endDate, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream BarChart - Date Range</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="startDate">The starting date to begin streaming bars from. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <param name="endDate">The ending date for bars streamed. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsFromStartDateToEndDateAsync(string access_token, SessionTemplate2? sessionTemplate, string symbol, int interval, Unit2 unit, string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            if (unit == null)
                throw new System.ArgumentNullException("unit");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/barchart/{symbol}/{interval}/{unit}/{startDate}/{endDate}?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interval}", System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{unit}", System.Uri.EscapeDataString(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{startDate}", System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endDate}", System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sessionTemplate != null) urlBuilder_.Append("SessionTemplate=").Append(System.Uri.EscapeDataString(ConvertToString(sessionTemplate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError400);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError400>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError400>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError404);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError404>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError404>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BarchartDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream BarChart - Bars Back</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="barsBack">The number of bars to stream, going back from time 00:00:00 of the day specified in lastDate</param>
        /// <param name="lastDate">The date to use as the end point when getting bars back. Date is of form MM-DD-YYYY, and is for time 00:00:00 of that day.</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsBarsBackAsync(string access_token, SessionTemplate3? sessionTemplate, string symbol, int interval, Unit3 unit, int barsBack, string lastDate)
        {
            return StreamBarchartsBarsBackAsync(access_token, sessionTemplate, symbol, interval, unit, barsBack, lastDate, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream BarChart - Bars Back</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="barsBack">The number of bars to stream, going back from time 00:00:00 of the day specified in lastDate</param>
        /// <param name="lastDate">The date to use as the end point when getting bars back. Date is of form MM-DD-YYYY, and is for time 00:00:00 of that day.</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsBarsBackAsync(string access_token, SessionTemplate3? sessionTemplate, string symbol, int interval, Unit3 unit, int barsBack, string lastDate, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            if (unit == null)
                throw new System.ArgumentNullException("unit");

            if (barsBack == null)
                throw new System.ArgumentNullException("barsBack");

            if (lastDate == null)
                throw new System.ArgumentNullException("lastDate");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/barchart/{symbol}/{interval}/{unit}/{barsBack}/{lastDate}/...?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interval}", System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{unit}", System.Uri.EscapeDataString(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{barsBack}", System.Uri.EscapeDataString(ConvertToString(barsBack, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lastDate}", System.Uri.EscapeDataString(ConvertToString(lastDate, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sessionTemplate != null) urlBuilder_.Append("SessionTemplate=").Append(System.Uri.EscapeDataString(ConvertToString(sessionTemplate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError400);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError400>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError400>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError404);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError404>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError404>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BarchartDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream BarChart - Days Back</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="daysBack">The number of bars to stream, going back from time 00:00:00 of the day specified in lastDate. Cannot exceed greater than 57600 if unit is Minute.</param>
        /// <param name="lastDate">The date to use as the end point when getting days back. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsDaysBackAsync(string access_token, SessionTemplate4? sessionTemplate, string symbol, int interval, Unit4 unit, int daysBack, string lastDate)
        {
            return StreamBarchartsDaysBackAsync(access_token, sessionTemplate, symbol, interval, unit, daysBack, lastDate, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream BarChart - Days Back</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="sessionTemplate">United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval that each bar will consist of. **For Daily, Weekly, and Monthly units this value must be 1.**</param>
        /// <param name="unit">Unit of time for each bar interval.</param>
        /// <param name="daysBack">The number of bars to stream, going back from time 00:00:00 of the day specified in lastDate. Cannot exceed greater than 57600 if unit is Minute.</param>
        /// <param name="lastDate">The date to use as the end point when getting days back. Date is of form MM-DD-YYYY, and optionally can specify a starting time with format MM-DD-YYYYt08:00:00 and even further UTC offset with format MM-DD-YYYYt12:00:00-0600</param>
        /// <returns>Barchart response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BarchartDefinition> StreamBarchartsDaysBackAsync(string access_token, SessionTemplate4? sessionTemplate, string symbol, int interval, Unit4 unit, int daysBack, string lastDate, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            if (unit == null)
                throw new System.ArgumentNullException("unit");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            if (daysBack == null)
                throw new System.ArgumentNullException("daysBack");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/barchart/{symbol}/{interval}/{unit}?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interval}", System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{unit}", System.Uri.EscapeDataString(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sessionTemplate != null) urlBuilder_.Append("SessionTemplate=").Append(System.Uri.EscapeDataString(ConvertToString(sessionTemplate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("daysBack=").Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lastDate != null) urlBuilder_.Append("lastDate=").Append(System.Uri.EscapeDataString(ConvertToString(lastDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError400);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError400>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError400>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BarchartError404);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError404>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BarchartError404>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BarchartDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Stream Tick Bars</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval for each bar returned (in ticks)</param>
        /// <param name="barsBack">The number of bars to stream, going back from current time</param>
        /// <returns>Tickbar response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TickbarDefinition> StreamTickBarsAsync(string access_token, string symbol, int interval, int barsBack)
        {
            return StreamTickBarsAsync(access_token, symbol, interval, barsBack, System.Threading.CancellationToken.None);
        }

        /// <summary>Stream Tick Bars</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol">A Symbol Name</param>
        /// <param name="interval">Interval for each bar returned (in ticks)</param>
        /// <param name="barsBack">The number of bars to stream, going back from current time</param>
        /// <returns>Tickbar response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TickbarDefinition> StreamTickBarsAsync(string access_token, string symbol, int interval, int barsBack, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            if (barsBack == null)
                throw new System.ArgumentNullException("barsBack");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stream/tickbars/{symbol}/{interval}/{barsBack}?");
            urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interval}", System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{barsBack}", System.Uri.EscapeDataString(ConvertToString(barsBack, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(TickbarDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TickbarDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TickbarDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get all Symbol Lists</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>SymbolLists response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SymbolListDefinition>> GetSymbolListsAsync(string access_token)
        {
            return GetSymbolListsAsync(access_token, System.Threading.CancellationToken.None);
        }

        /// <summary>Get all Symbol Lists</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>SymbolLists response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SymbolListDefinition>> GetSymbolListsAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbollists?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SymbolListDefinition>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SymbolListDefinition>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<SymbolListDefinition>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Symbol List</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol_list_id">A valid Symbol List ID</param>
        /// <returns>SymbolList response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SymbolListDefinition> GetSymbolListByIDAsync(string access_token, string symbol_list_id)
        {
            return GetSymbolListByIDAsync(access_token, symbol_list_id, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Symbol List</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol_list_id">A valid Symbol List ID</param>
        /// <returns>SymbolList response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SymbolListDefinition> GetSymbolListByIDAsync(string access_token, string symbol_list_id, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol_list_id == null)
                throw new System.ArgumentNullException("symbol_list_id");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbollists/{symbol_list_id}?");
            urlBuilder_.Replace("{symbol_list_id}", System.Uri.EscapeDataString(ConvertToString(symbol_list_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(SymbolListDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SymbolListDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol List not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SymbolListDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Symbols in a Symbol List</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol_list_id">A valid Symbol List ID</param>
        /// <returns>SymbolList Symbols response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> GetSymbolListSymbolsByIDAsync(string access_token, string symbol_list_id)
        {
            return GetSymbolListSymbolsByIDAsync(access_token, symbol_list_id, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Symbols in a Symbol List</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="symbol_list_id">A valid Symbol List ID</param>
        /// <returns>SymbolList Symbols response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous4>> GetSymbolListSymbolsByIDAsync(string access_token, string symbol_list_id, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol_list_id == null)
                throw new System.ArgumentNullException("symbol_list_id");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/symbollists/{symbol_list_id}/symbols?");
            urlBuilder_.Replace("{symbol_list_id}", System.Uri.EscapeDataString(ConvertToString(symbol_list_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous4>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Symbol List not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get User Accounts</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="user_id">User ID for Accounts Lookup</param>
        /// <returns>Accounts Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> GetAccountsByUserIDAsync(string access_token, string user_id)
        {
            return GetAccountsByUserIDAsync(access_token, user_id, System.Threading.CancellationToken.None);
        }

        /// <summary>Get User Accounts</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="user_id">User ID for Accounts Lookup</param>
        /// <returns>Accounts Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous5>> GetAccountsByUserIDAsync(string access_token, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users/{user_id}/accounts?");
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous5>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("User not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Account Balances</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <returns>Account Balances Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> GetBalancesByAccountsAsync(string access_token, System.Collections.Generic.IEnumerable<string> account_keys)
        {
            return GetBalancesByAccountsAsync(access_token, account_keys, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Account Balances</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <returns>Account Balances Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous6>> GetBalancesByAccountsAsync(string access_token, System.Collections.Generic.IEnumerable<string> account_keys, System.Threading.CancellationToken cancellationToken)
        {
            if (account_keys == null)
                throw new System.ArgumentNullException("account_keys");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{account_keys}/balances?");
            urlBuilder_.Replace("{account_keys}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(account_keys, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous6>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Account not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous6>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Account Positions</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <param name="filter">An OData v2.0 filter.
        /// 
        /// Available Fields:
        ///   - `Symbol`: Symbol Name for Position</param>
        /// <returns>Account Positions Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous7>> GetPositionsByAccountsAsync(string access_token, System.Collections.Generic.IEnumerable<string> account_keys, string filter)
        {
            return GetPositionsByAccountsAsync(access_token, account_keys, filter, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Account Positions</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <param name="filter">An OData v2.0 filter.
        /// 
        /// Available Fields:
        ///   - `Symbol`: Symbol Name for Position</param>
        /// <returns>Account Positions Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous7>> GetPositionsByAccountsAsync(string access_token, System.Collections.Generic.IEnumerable<string> account_keys, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (account_keys == null)
                throw new System.ArgumentNullException("account_keys");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{account_keys}/positions?");
            urlBuilder_.Replace("{account_keys}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(account_keys, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (filter != null) urlBuilder_.Append("$filter=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous7>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous7>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Account not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous7>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Account Orders</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="since">Start Date from which to pull older orders. `MM-DD-YYYY` format.
        /// Note that Pagination does not apply for requests that include this parameter.</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <param name="pageSize">Conveys the number of order items to return in the request. (Default page size is 600).
        /// Note that an empty set will be returned for a pageNum/pageSize combination that doesn't contain orders.</param>
        /// <param name="pageNum">Conveys the page number to return, given a set of orders and a page size.
        /// Note that an empty set will be returned for a pageNum/pageSize combination that doesn't contain orders.</param>
        /// <returns>Account Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous8>> GetOrdersByAccountsAsync(string access_token, string since, System.Collections.Generic.IEnumerable<string> account_keys, string pageSize, string pageNum)
        {
            return GetOrdersByAccountsAsync(access_token, since, account_keys, pageSize, pageNum, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Account Orders</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="since">Start Date from which to pull older orders. `MM-DD-YYYY` format.
        /// Note that Pagination does not apply for requests that include this parameter.</param>
        /// <param name="account_keys">1 or more Account Keys</param>
        /// <param name="pageSize">Conveys the number of order items to return in the request. (Default page size is 600).
        /// Note that an empty set will be returned for a pageNum/pageSize combination that doesn't contain orders.</param>
        /// <param name="pageNum">Conveys the page number to return, given a set of orders and a page size.
        /// Note that an empty set will be returned for a pageNum/pageSize combination that doesn't contain orders.</param>
        /// <returns>Account Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Anonymous8>> GetOrdersByAccountsAsync(string access_token, string since, System.Collections.Generic.IEnumerable<string> account_keys, string pageSize, string pageNum, System.Threading.CancellationToken cancellationToken)
        {
            if (account_keys == null)
                throw new System.ArgumentNullException("account_keys");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/accounts/{account_keys}/orders?");
            urlBuilder_.Replace("{account_keys}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(account_keys, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageNum != null) urlBuilder_.Append("pageNum=").Append(System.Uri.EscapeDataString(ConvertToString(pageNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Anonymous8>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Anonymous8>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Account not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Anonymous8>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Confirm Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Order Confirm Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderConfirmResponseDefinition> PostOrderConfirmAsync(string access_token, OrderConfirmRequestDefinition body)
        {
            return PostOrderConfirmAsync(access_token, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Confirm Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Order Confirm Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderConfirmResponseDefinition> PostOrderConfirmAsync(string access_token, OrderConfirmRequestDefinition body, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/confirm?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderConfirmResponseDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderConfirmResponseDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderConfirmResponseDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Submit Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderResponseDefinition> PostOrderAsync(string access_token, OrderRequestDefinition body)
        {
            return PostOrderAsync(access_token, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Submit Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderResponseDefinition> PostOrderAsync(string access_token, OrderRequestDefinition body, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderResponseDefinition);
                            try
                            {
                                //TODO: wtf is this an array?
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResponseDefinition[]>(responseData_, _settings.Value)[0];
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderResponseDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Cancel Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="order_id">An existing Order ID</param>
        /// <returns>Cancel Order Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderResponseDefinition> CancelOrderAsync(string access_token, string order_id)
        {
            return CancelOrderAsync(access_token, order_id, System.Threading.CancellationToken.None);
        }

        /// <summary>Cancel Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="order_id">An existing Order ID</param>
        /// <returns>Cancel Order Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderResponseDefinition> CancelOrderAsync(string access_token, string order_id, System.Threading.CancellationToken cancellationToken)
        {
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderResponseDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResponseDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderResponseDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Update Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="order_id">An existing Order ID</param>
        /// <returns>CancelReplace Order Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderResponseDefinition> CancelReplaceOrderAsync(string access_token, string order_id, CancelReplaceDefinition body)
        {
            return CancelReplaceOrderAsync(access_token, order_id, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Update Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <param name="order_id">An existing Order ID</param>
        /// <returns>CancelReplace Order Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderResponseDefinition> CancelReplaceOrderAsync(string access_token, string order_id, CancelReplaceDefinition body, System.Threading.CancellationToken cancellationToken)
        {
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");

            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderResponseDefinition);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResponseDefinition>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderResponseDefinition);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Confirm Group Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Group Order Confirm Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OrderConfirmResponseDefinition>> PostOrderGroupsConfirmAsync(string access_token, GroupOrderConfirmRequestDefinition body)
        {
            return PostOrderGroupsConfirmAsync(access_token, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Confirm Group Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Group Order Confirm Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OrderConfirmResponseDefinition>> PostOrderGroupsConfirmAsync(string access_token, GroupOrderConfirmRequestDefinition body, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/groups/confirm?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<OrderConfirmResponseDefinition>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<OrderConfirmResponseDefinition>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<OrderConfirmResponseDefinition>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Submit Group Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Group Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OrderResponseDefinition>> PostOrderGroupAsync(string access_token, GroupOrderRequestDefinition body)
        {
            return PostOrderGroupAsync(access_token, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Submit Group Order</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Group Orders Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OrderResponseDefinition>> PostOrderGroupAsync(string access_token, GroupOrderRequestDefinition body, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/groups?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<OrderResponseDefinition>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<OrderResponseDefinition>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<OrderResponseDefinition>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Request Available Activation Triggers</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Get Activation Triggers Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetActivationTriggersAsync(string access_token)
        {
            return GetActivationTriggersAsync(access_token, System.Threading.CancellationToken.None);
        }

        /// <summary>Request Available Activation Triggers</summary>
        /// <param name="access_token">A valid OAuth2 token used to authorize access to the resource</param>
        /// <returns>Get Activation Triggers Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> GetActivationTriggersAsync(string access_token, System.Threading.CancellationToken cancellationToken)
        {
            if (access_token == null)
                throw new System.ArgumentNullException("access_token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orderexecution/activationtriggers?");
            urlBuilder_.Append("access_token=").Append(System.Uri.EscapeDataString(ConvertToString(access_token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    //request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Response);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Unexpected Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Bad Gateway", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "504")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Gateway Timeout", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _traceId;
        private int _statusCode;
        private string _message;

        [Newtonsoft.Json.JsonProperty("TraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? TraceId
        {
            get { return _traceId; }
            set
            {
                if (_traceId != value)
                {
                    _traceId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default)]
        public int StatusCode
        {
            get { return _statusCode; }
            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BarchartError400 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _statusCode;
        private BarchartError400Message _message;

        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default)]
        public int StatusCode
        {
            get { return _statusCode; }
            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BarchartError400Message Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BarchartError400 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError400>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BarchartError404 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _statusCode;
        private BarchartError404Message _message;

        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default)]
        public int StatusCode
        {
            get { return _statusCode; }
            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BarchartError404Message Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BarchartError404 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartError404>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Symbol metadata</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SymbolDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _category;
        private SymbolDefinitionCountry? _country;
        private SymbolDefinitionCurrency _currency;
        private string _description;
        private string _error;
        private SymbolDefinitionExchange _exchange;
        private double _exchangeID;
        private string _expirationDate;
        private string _expirationType;
        private string _futureType;
        private string _industryCode;
        private string _industryName;
        private double _lotSize;
        private double _minMove;
        private string _name;
        private string _optionType;
        private double _pointValue;
        private string _root;
        private string _sectorName;
        private double _strikePrice;

        /// <summary>The type of financial instrument that the symbol represents, such as a stock, index, or mutual fund.</summary>
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SymbolDefinitionCountry? Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of base currency for the selected symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SymbolDefinitionCurrency Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Element that references error.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SymbolDefinitionExchange Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique numerical identifier for the Exchange.</summary>
        [Newtonsoft.Json.JsonProperty("ExchangeID", Required = Newtonsoft.Json.Required.Default)]
        public double ExchangeID
        {
            get { return _exchangeID; }
            set
            {
                if (_exchangeID != value)
                {
                    _exchangeID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the expiration date for a futures or options contract in UTC formatted time.</summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ExpirationDate
        {
            get { return _expirationDate; }
            set
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For options only. It indicates whether the option is a monthly, weekly, quarterly or end of month expiration.
        /// * W - Weekly
        /// * M - Monthly
        /// * Q - Quartely
        /// * E - End of the month
        /// * "" - The term not be identified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationType
        {
            get { return _expirationType; }
            set
            {
                if (_expirationType != value)
                {
                    _expirationType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of future contract the symbol represents</summary>
        [Newtonsoft.Json.JsonProperty("FutureType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FutureType
        {
            get { return _futureType; }
            set
            {
                if (_futureType != value)
                {
                    _futureType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays a digit code that categorize companies by the type of business activities they engage in.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryCode
        {
            get { return _industryCode; }
            set
            {
                if (_industryCode != value)
                {
                    _industryCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the Reuters assigned industry name to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryName
        {
            get { return _industryName; }
            set
            {
                if (_industryName != value)
                {
                    _industryName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The currency amount associated with a lot (contract) in the specified account.</summary>
        [Newtonsoft.Json.JsonProperty("LotSize", Required = Newtonsoft.Json.Required.Default)]
        public double LotSize
        {
            get { return _lotSize; }
            set
            {
                if (_lotSize != value)
                {
                    _lotSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The smallest amount of price change allowed for a particular symbol. This value is expressed in terms of Price Scale increments.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default)]
        public double MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique series of letters assigned to a security for trading purposes.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of options contract the symbol represents. Valid options include: Puts, Calls.</summary>
        [Newtonsoft.Json.JsonProperty("OptionType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OptionType
        {
            get { return _optionType; }
            set
            {
                if (_optionType != value)
                {
                    _optionType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol`s point value.</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default)]
        public double PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the symbol of the stock on the stock exchange.</summary>
        [Newtonsoft.Json.JsonProperty("Root", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Root
        {
            get { return _root; }
            set
            {
                if (_root != value)
                {
                    _root = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the assigned economic sector to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("SectorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectorName
        {
            get { return _sectorName; }
            set
            {
                if (_sectorName != value)
                {
                    _sectorName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays strike price of an options contract; For Options symbols only.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SymbolDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SymbolDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SymbolListDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _category;
        private string _iD;
        private string _name;
        private string _path;
        private string _rootCategory;
        private string _subcategory;

        /// <summary>Second Level of Symbol List Hierarchy.</summary>
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique symbol list identifier.</summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    _iD = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol List Name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Full hierarchy path including name.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    _path = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>First Level of Symbol List Hierarchy.</summary>
        [Newtonsoft.Json.JsonProperty("RootCategory", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RootCategory
        {
            get { return _rootCategory; }
            set
            {
                if (_rootCategory != value)
                {
                    _rootCategory = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Thrid Level of Symbol List Hierarchy.</summary>
        [Newtonsoft.Json.JsonProperty("Subcategory", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Subcategory
        {
            get { return _subcategory; }
            set
            {
                if (_subcategory != value)
                {
                    _subcategory = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SymbolListDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SymbolListDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderConfirmRequestDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accountKey;
        private AdvancedOptionsDefinition _advancedOptions;
        private OrderConfirmRequestDefinitionAssetType _assetType;
        private OrderConfirmRequestDefinitionDuration _duration;
        private string _gTDDate;
        private string _limitPrice;
        private string _stopPrice;
        private OrderConfirmRequestDefinitionOrderType _orderType;
        private string _quantity;
        private OrderConfirmRequestDefinitionRoute? _route;
        private string _symbol;
        private OrderConfirmRequestDefinitionTradeAction _tradeAction;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous9> _oSOs;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous10> _legs;

        /// <summary>Must be a valid Account Key for that user and Asset Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccountKey", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountKey
        {
            get { return _accountKey; }
            set
            {
                if (_accountKey != value)
                {
                    _accountKey = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AdvancedOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvancedOptionsDefinition AdvancedOptions
        {
            get { return _advancedOptions; }
            set
            {
                if (_advancedOptions != value)
                {
                    _advancedOptions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderConfirmRequestDefinitionAssetType AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Allowed durations vary by Asset Type
        /// * DAY - Day, valid until the end of the regular trading session.
        /// * DYP - Day Plus; valid until the end of the extended trading session
        /// * GTC - Good till canceled
        /// * GCP - Good till canceled plus
        /// * GTD - Good through date
        /// * GDP - Good through date plus
        /// * OPG - At the opening; only valid for listed stocks at the opening session Price
        /// * CLO - On Close; orders that target the closing session of an exchange.
        /// * IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted
        /// * FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted
        /// * 1 or 1 MIN - 1 minute; expires after the 1 minute
        /// * 3 or 3 MIN - 3 minutes; expires after the 3 minutes
        /// * 5 or 5 MIN - 5 minutes; expires after the 5 minutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderConfirmRequestDefinitionDuration Duration
        {
            get { return _duration; }
            set
            {
                if (_duration != value)
                {
                    _duration = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date that Order is valid through. Input Format: MM/DD/YYYY
        /// Required for orders with Duration = GTD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GTDDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string GTDDate
        {
            get { return _gTDDate; }
            set
            {
                if (_gTDDate != value)
                {
                    _gTDDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("LimitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string LimitPrice
        {
            get { return _limitPrice; }
            set
            {
                if (_limitPrice != value)
                {
                    _limitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("StopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StopPrice
        {
            get { return _stopPrice; }
            set
            {
                if (_stopPrice != value)
                {
                    _stopPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderConfirmRequestDefinitionOrderType OrderType
        {
            get { return _orderType; }
            set
            {
                if (_orderType != value)
                {
                    _orderType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Route", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderConfirmRequestDefinitionRoute? Route
        {
            get { return _route; }
            set
            {
                if (_route != value)
                {
                    _route = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Must be UPPERCASE</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Conveys the intent of the trade
        /// * BUY - `equities` and `futures`
        /// * SELL - `equities` and `futures`
        /// * BUYTOCOVER - `equities`
        /// * SELLSHORT - `equities`
        /// * BUYTOOPEN - `options`
        /// * BUYTOCLOSE - `options`
        /// * SELLTOOPEN - `options`
        /// * SELLTOCLOSE - `options`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TradeAction", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderConfirmRequestDefinitionTradeAction TradeAction
        {
            get { return _tradeAction; }
            set
            {
                if (_tradeAction != value)
                {
                    _tradeAction = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OSOs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous9> OSOs
        {
            get { return _oSOs; }
            set
            {
                if (_oSOs != value)
                {
                    _oSOs = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous10> Legs
        {
            get { return _legs; }
            set
            {
                if (_legs != value)
                {
                    _legs = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderConfirmRequestDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderConfirmRequestDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderRequestDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accountKey;
        private AdvancedOptionsDefinition _advancedOptions;
        private OrderRequestDefinitionAssetType _assetType;
        private OrderRequestDefinitionDuration _duration;
        private string _gTDDate;
        private string _limitPrice;
        private string _stopPrice;
        private string _orderConfirmId;
        private OrderRequestDefinitionOrderType _orderType;
        private string _quantity;
        private OrderRequestDefinitionRoute? _route;
        private string _symbol;
        private OrderRequestDefinitionTradeAction _tradeAction;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous11> _oSOs;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous12> _legs;

        /// <summary>Must be a valid Account Key for that user and Asset Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccountKey", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountKey
        {
            get { return _accountKey; }
            set
            {
                if (_accountKey != value)
                {
                    _accountKey = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AdvancedOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvancedOptionsDefinition AdvancedOptions
        {
            get { return _advancedOptions; }
            set
            {
                if (_advancedOptions != value)
                {
                    _advancedOptions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderRequestDefinitionAssetType AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Allowed durations vary by Asset Type
        /// * DAY - Day, valid until the end of the regular trading session.
        /// * DYP - Day Plus; valid until the end of the extended trading session
        /// * GTC - Good till canceled
        /// * GCP - Good till canceled plus
        /// * GTD - Good through date
        /// * GDP - Good through date plus
        /// * OPG - At the opening; only valid for listed stocks at the opening session Price
        /// * CLO - On Close; orders that target the closing session of an exchange.
        /// * IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted
        /// * FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted
        /// * 1 or 1 MIN - 1 minute; expires after the 1 minute
        /// * 3 or 3 MIN - 3 minutes; expires after the 3 minutes
        /// * 5 or 5 MIN - 5 minutes; expires after the 5 minutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderRequestDefinitionDuration Duration
        {
            get { return _duration; }
            set
            {
                if (_duration != value)
                {
                    _duration = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date that Order is valid through. Input Format: MM/DD/YYYY
        /// Required for orders with Duration = GTD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GTDDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string GTDDate
        {
            get { return _gTDDate; }
            set
            {
                if (_gTDDate != value)
                {
                    _gTDDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("LimitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string LimitPrice
        {
            get { return _limitPrice; }
            set
            {
                if (_limitPrice != value)
                {
                    _limitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("StopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StopPrice
        {
            get { return _stopPrice; }
            set
            {
                if (_stopPrice != value)
                {
                    _stopPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique identifier regarding an order used to prevent duplicates.
        /// 
        /// Must be unique per API key, per order, per user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderConfirmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string OrderConfirmId
        {
            get { return _orderConfirmId; }
            set
            {
                if (_orderConfirmId != value)
                {
                    _orderConfirmId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderRequestDefinitionOrderType OrderType
        {
            get { return _orderType; }
            set
            {
                if (_orderType != value)
                {
                    _orderType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Route", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderRequestDefinitionRoute? Route
        {
            get { return _route; }
            set
            {
                if (_route != value)
                {
                    _route = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Must be UPPERCASE</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Conveys the intent of the trade
        /// * BUY - `equities` and `futures`
        /// * SELL - `equities` and `futures`
        /// * BUYTOCOVER - `equities`
        /// * SELLSHORT - `equities`
        /// * BUYTOOPEN - `options`
        /// * BUYTOCLOSE - `options`
        /// * SELLTOOPEN - `options`
        /// * SELLTOCLOSE - `options`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TradeAction", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderRequestDefinitionTradeAction TradeAction
        {
            get { return _tradeAction; }
            set
            {
                if (_tradeAction != value)
                {
                    _tradeAction = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OSOs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous11> OSOs
        {
            get { return _oSOs; }
            set
            {
                if (_oSOs != value)
                {
                    _oSOs = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous12> Legs
        {
            get { return _legs; }
            set
            {
                if (_legs != value)
                {
                    _legs = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderRequestDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderRequestDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancelReplaceDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _limitPrice;
        private string _stopPrice;
        private string _orderType;
        private string _quantity;
        private string _symbol;
        private CancelReplaceAdvancedOptionsDefinition _advancedOptions;

        [Newtonsoft.Json.JsonProperty("LimitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string LimitPrice
        {
            get { return _limitPrice; }
            set
            {
                if (_limitPrice != value)
                {
                    _limitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("StopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StopPrice
        {
            get { return _stopPrice; }
            set
            {
                if (_stopPrice != value)
                {
                    _stopPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OrderType
        {
            get { return _orderType; }
            set
            {
                if (_orderType != value)
                {
                    _orderType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AdvancedOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelReplaceAdvancedOptionsDefinition AdvancedOptions
        {
            get { return _advancedOptions; }
            set
            {
                if (_advancedOptions != value)
                {
                    _advancedOptions = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CancelReplaceDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelReplaceDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Advanced Options for an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancelReplaceAdvancedOptionsDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private TrailingStopDefinition _trailingStop;
        private CancelReplaceMarketActivationRuleDefinition _marketActivationRules;
        private CancelReplaceTimeActivationRuleDefinition _timeActivationRules;
        private int? _showOnlyQuantity;

        [Newtonsoft.Json.JsonProperty("TrailingStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrailingStopDefinition TrailingStop
        {
            get { return _trailingStop; }
            set
            {
                if (_trailingStop != value)
                {
                    _trailingStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("MarketActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelReplaceMarketActivationRuleDefinition MarketActivationRules
        {
            get { return _marketActivationRules; }
            set
            {
                if (_marketActivationRules != value)
                {
                    _marketActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("TimeActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelReplaceTimeActivationRuleDefinition TimeActivationRules
        {
            get { return _timeActivationRules; }
            set
            {
                if (_timeActivationRules != value)
                {
                    _timeActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares to submit to market at a time for this order. Valid for futures and equities orders. For equities, must be multiple of 100.
        /// Cannot be added if original order did not have ShowOnlyQuantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShowOnlyQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ShowOnlyQuantity
        {
            get { return _showOnlyQuantity; }
            set
            {
                if (_showOnlyQuantity != value)
                {
                    _showOnlyQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CancelReplaceAdvancedOptionsDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelReplaceAdvancedOptionsDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Advanced Options for an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancelReplaceMarketActivationRuleDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _clearAll;
        private System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> _rules;

        /// <summary>If 'True', removes all activation rules when replacing the order and ignores any rules sent in `Rules`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ClearAll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClearAll
        {
            get { return _clearAll; }
            set
            {
                if (_clearAll != value)
                {
                    _clearAll = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of market-based activation rules that must be met before order is sent to the exchange. Max 4 rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> Rules
        {
            get { return _rules; }
            set
            {
                if (_rules != value)
                {
                    _rules = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CancelReplaceMarketActivationRuleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelReplaceMarketActivationRuleDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Advanced Options for an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancelReplaceTimeActivationRuleDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _clearAll;
        private System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> _rules;

        /// <summary>If 'True', removes all activation rules when replacing the order and ignores any rules sent in `Rules`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ClearAll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClearAll
        {
            get { return _clearAll; }
            set
            {
                if (_clearAll != value)
                {
                    _clearAll = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of time-based activation rules that must be met before order is sent to the exchange. Max 1 rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> Rules
        {
            get { return _rules; }
            set
            {
                if (_rules != value)
                {
                    _rules = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CancelReplaceTimeActivationRuleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelReplaceTimeActivationRuleDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Advanced Options for an order</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AdvancedOptionsDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private TrailingStopDefinition _trailingStop;
        private System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> _marketActivationRules;
        private System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> _timeActivationRules;
        private int? _showOnlyQuantity;

        [Newtonsoft.Json.JsonProperty("TrailingStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrailingStopDefinition TrailingStop
        {
            get { return _trailingStop; }
            set
            {
                if (_trailingStop != value)
                {
                    _trailingStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of market-based activation rules that must be met before order is sent to the exchange. Max 4 rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> MarketActivationRules
        {
            get { return _marketActivationRules; }
            set
            {
                if (_marketActivationRules != value)
                {
                    _marketActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of time-based activation rules that must be met before order is sent to the exchange. Max 1 rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TimeActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> TimeActivationRules
        {
            get { return _timeActivationRules; }
            set
            {
                if (_timeActivationRules != value)
                {
                    _timeActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares to submit to market at a time for this order. Valid for futures and equities orders. For equities, must be multiple of 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShowOnlyQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ShowOnlyQuantity
        {
            get { return _showOnlyQuantity; }
            set
            {
                if (_showOnlyQuantity != value)
                {
                    _showOnlyQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AdvancedOptionsDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdvancedOptionsDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Market Activation Rules that must be met before the order is sent to the exchange.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketActivationRuleDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private MarketActivationRuleDefinitionRuleType? _ruleType;
        private string _symbol;
        private MarketActivationRuleDefinitionPredicate? _predicate;
        private MarketActivationRuleDefinitionTriggerKey? _triggerKey;
        private string _price;
        private MarketActivationRuleDefinitionLogicOperator? _logicOperator;

        /// <summary>Type of the activation rule. Currently only support "Price"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RuleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketActivationRuleDefinitionRuleType? RuleType
        {
            get { return _ruleType; }
            set
            {
                if (_ruleType != value)
                {
                    _ruleType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol that the rule is based on
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The predicate comparison for the market rule type. E.g. Lt (less than).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Predicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketActivationRuleDefinitionPredicate? Predicate
        {
            get { return _predicate; }
            set
            {
                if (_predicate != value)
                {
                    _predicate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The ticks behavior for the activation rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TriggerKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketActivationRuleDefinitionTriggerKey? TriggerKey
        {
            get { return _triggerKey; }
            set
            {
                if (_triggerKey != value)
                {
                    _triggerKey = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Valid only for Type="Price", the price at which the rule will trigger when the price hits ticks as specified by TriggerType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Relation with the previous activation rule when given a list of MarketActivationRules. Ignored for the first MarketActivationRule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogicOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketActivationRuleDefinitionLogicOperator? LogicOperator
        {
            get { return _logicOperator; }
            set
            {
                if (_logicOperator != value)
                {
                    _logicOperator = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketActivationRuleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketActivationRuleDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Time Activation Rules that must be met before the order is sent to the exchange.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TimeActivationRuleDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _timeUtc;

        /// <summary>Order is activated once current UTC time is greater thans or equal to TimeUtc. hh:mm:ss
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TimeUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeUtc
        {
            get { return _timeUtc; }
            set
            {
                if (_timeUtc != value)
                {
                    _timeUtc = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TimeActivationRuleDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeActivationRuleDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Trailing Stop offset; amount or percent</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrailingStopDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _amount;
        private double? _percent;

        /// <summary>Currency Offset from current price.
        /// Note: Mutually exclusive with Percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Percentage offset from current price.
        /// Note: Mutually exclusive with Amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent
        {
            get { return _percent; }
            set
            {
                if (_percent != value)
                {
                    _percent = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrailingStopDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrailingStopDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Order Confirm definition. The response will also contain asset-specific fields</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderConfirmResponseDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _route;
        private string _duration;
        private string _account;
        private string _orderConfirmId;
        private double _estimatedPrice;
        private string _estimatedPriceDisplay;
        private double? _estimatedCost;
        private string _estimatedCostDisplay;
        private double? _debitCreditEstimatedCost;
        private string _debitCreditEstimatedCostDisplay;
        private double? _estimatedCommission;
        private string _estimatedCommissionDisplay;
        private string _baseCurrency;
        private string _counterCurrency;
        private string _initialMarginDisplay;
        private string _productCurrency;
        private string _accountCurrency;
        private TrailingStopDefinition _trailingStop;
        private System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> _marketActivationRules;
        private System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> _timeActivationRules;
        private int? _showOnlyQuantity;

        /// <summary>The path chosen for directing a trade to a certain destination, such as an ECN, MM, Exchange, or Intelligent.</summary>
        [Newtonsoft.Json.JsonProperty("Route", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Route
        {
            get { return _route; }
            set
            {
                if (_route != value)
                {
                    _route = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The amount of time for which an order is valid. Duration is the same as TIF (Time in Force).</summary>
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Duration
        {
            get { return _duration; }
            set
            {
                if (_duration != value)
                {
                    _duration = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number that identifies a specific TradeStation account that is being used for a particular order.</summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Account
        {
            get { return _account; }
            set
            {
                if (_account != value)
                {
                    _account = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique id generated per order per API Key and User</summary>
        [Newtonsoft.Json.JsonProperty("OrderConfirmId", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OrderConfirmId
        {
            get { return _orderConfirmId; }
            set
            {
                if (_orderConfirmId != value)
                {
                    _orderConfirmId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>An estimated value that is calculated using current market information. The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders, may differ significantly from this estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedPrice", Required = Newtonsoft.Json.Required.Default)]
        public double EstimatedPrice
        {
            get { return _estimatedPrice; }
            set
            {
                if (_estimatedPrice != value)
                {
                    _estimatedPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Equity and Futures Orders; Estimated price formatted for display</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedPriceDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimatedPriceDisplay
        {
            get { return _estimatedPriceDisplay; }
            set
            {
                if (_estimatedPriceDisplay != value)
                {
                    _estimatedPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders.</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedCost
        {
            get { return _estimatedCost; }
            set
            {
                if (_estimatedCost != value)
                {
                    _estimatedCost = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Equity Orders; Estimated cost formatted for display</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedCostDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimatedCostDisplay
        {
            get { return _estimatedCostDisplay; }
            set
            {
                if (_estimatedCostDisplay != value)
                {
                    _estimatedCostDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders. Takes into account wheather or not the transaction will result in a debit or credit to the user.</summary>
        [Newtonsoft.Json.JsonProperty("DebitCreditEstimatedCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DebitCreditEstimatedCost
        {
            get { return _debitCreditEstimatedCost; }
            set
            {
                if (_debitCreditEstimatedCost != value)
                {
                    _debitCreditEstimatedCost = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Equity Orders; Debit credit estimated cost formatted for display</summary>
        [Newtonsoft.Json.JsonProperty("DebitCreditEstimatedCostDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebitCreditEstimatedCostDisplay
        {
            get { return _debitCreditEstimatedCostDisplay; }
            set
            {
                if (_debitCreditEstimatedCostDisplay != value)
                {
                    _debitCreditEstimatedCostDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>An estimated value that is calculated using the published TradeStation commission schedule. Equity and Futures Orders</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedCommission
        {
            get { return _estimatedCommission; }
            set
            {
                if (_estimatedCommission != value)
                {
                    _estimatedCommission = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Equity and Futures Orders; Estimated commission formatted for display</summary>
        [Newtonsoft.Json.JsonProperty("EstimatedCommissionDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimatedCommissionDisplay
        {
            get { return _estimatedCommissionDisplay; }
            set
            {
                if (_estimatedCommissionDisplay != value)
                {
                    _estimatedCommissionDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Forex Orders; </summary>
        [Newtonsoft.Json.JsonProperty("BaseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseCurrency
        {
            get { return _baseCurrency; }
            set
            {
                if (_baseCurrency != value)
                {
                    _baseCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Forex Orders; Estimated cost formatted for display</summary>
        [Newtonsoft.Json.JsonProperty("CounterCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CounterCurrency
        {
            get { return _counterCurrency; }
            set
            {
                if (_counterCurrency != value)
                {
                    _counterCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Forex and Futures Orders; Initial margin cost formatted for display in currency of asset</summary>
        [Newtonsoft.Json.JsonProperty("InitialMarginDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialMarginDisplay
        {
            get { return _initialMarginDisplay; }
            set
            {
                if (_initialMarginDisplay != value)
                {
                    _initialMarginDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Futures Orders; </summary>
        [Newtonsoft.Json.JsonProperty("ProductCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCurrency
        {
            get { return _productCurrency; }
            set
            {
                if (_productCurrency != value)
                {
                    _productCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Futures Orders; </summary>
        [Newtonsoft.Json.JsonProperty("AccountCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCurrency
        {
            get { return _accountCurrency; }
            set
            {
                if (_accountCurrency != value)
                {
                    _accountCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("TrailingStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrailingStopDefinition TrailingStop
        {
            get { return _trailingStop; }
            set
            {
                if (_trailingStop != value)
                {
                    _trailingStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("MarketActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> MarketActivationRules
        {
            get { return _marketActivationRules; }
            set
            {
                if (_marketActivationRules != value)
                {
                    _marketActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("TimeActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> TimeActivationRules
        {
            get { return _timeActivationRules; }
            set
            {
                if (_timeActivationRules != value)
                {
                    _timeActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Equity and Futures Orders; Number of shares to submit to market at a time for this order</summary>
        [Newtonsoft.Json.JsonProperty("ShowOnlyQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShowOnlyQuantity
        {
            get { return _showOnlyQuantity; }
            set
            {
                if (_showOnlyQuantity != value)
                {
                    _showOnlyQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderConfirmResponseDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderConfirmResponseDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOrderConfirmRequestDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<OrderConfirmRequestDefinition> _orders = new System.Collections.ObjectModel.ObservableCollection<OrderConfirmRequestDefinition>();
        private GroupOrderConfirmRequestDefinitionType _type;

        [Newtonsoft.Json.JsonProperty("Orders", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<OrderConfirmRequestDefinition> Orders
        {
            get { return _orders; }
            set
            {
                if (_orders != value)
                {
                    _orders = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates how Order Execution should treat this group of orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GroupOrderConfirmRequestDefinitionType Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOrderConfirmRequestDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOrderConfirmRequestDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderResponseDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private string _orderID;
        private OrderResponseDefinitionOrderStatus _orderStatus;

        /// <summary>Message string returned from orders service.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Identifier for order.</summary>
        [Newtonsoft.Json.JsonProperty("OrderID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    _orderID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Returns the status of the order operation</summary>
        [Newtonsoft.Json.JsonProperty("OrderStatus", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderResponseDefinitionOrderStatus OrderStatus
        {
            get { return _orderStatus; }
            set
            {
                if (_orderStatus != value)
                {
                    _orderStatus = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderResponseDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResponseDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupOrderRequestDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<OrderRequestDefinition> _orders = new System.Collections.ObjectModel.ObservableCollection<OrderRequestDefinition>();
        private GroupOrderRequestDefinitionType _type;

        [Newtonsoft.Json.JsonProperty("Orders", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<OrderRequestDefinition> Orders
        {
            get { return _orders; }
            set
            {
                if (_orders != value)
                {
                    _orders = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates how Order Execution should treat this group of orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GroupOrderRequestDefinitionType Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GroupOrderRequestDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupOrderRequestDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>The trigger type allows you to specify the type of tick, number, and pattern of ticks that will trigger a specific row of an activation rule.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActivationTriggerDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private ActivationTriggerDefinitionKey _key;
        private string _name;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>* STT - Single Trade Tick; One trade tick must print within your stop price to trigger your stop.
        /// * STTN - Single Trade Tick within NBBO;    One trade tick within the National Best Bid or Offer must print within your stop price to trigger your stop.
        /// * SBA - Single Bid/Ask Tick;    Buy/Cover Orders - One Ask tick must print within your stop price to trigger your stop. Sell/Short Orders - One Bid tick must print within your stop price to trigger your stop.
        /// * SAB - Single Ask/Bid Tick; Buy/Cover Orders - One Bid tick must print within your stop price to trigger your stop. Sell/Short Orders - One Ask tick must print within your stop price to trigger your stop.
        /// * DTT - Double Trade Tick; Two consecutive trade ticks must print within your stop price to trigger your stop.
        /// * DTTN - Double Trade Tick within NBBO; Two consecutive trade ticks within the National Best Bid or Offer must print within your stop price to trigger your stop.
        /// * DBA - Double Bid/Ask Tick; Buy/Cover Orders - Two consecutive Ask ticks must print within your stop price to trigger your stop. Sell/Short Orders - Two consecutive Bid ticks must print within your stop price to trigger your stop
        /// * DAB - Double Ask/Bid Tick;     Buy/Cover Orders - Two consecutive Bid ticks must print within your stop price to trigger your stop. Sell/Short Orders - Two consecutive Ask ticks must print within your stop price to trigger your stop.
        /// * TTT - Twice Trade Tick; Two trade ticks must print within your stop price to trigger your stop.
        /// * TTTN - Twice Trade Tick; Two trade ticks within the National Best Bid or Offer must print within your stop price to trigger your stop.
        /// * TBA - Twice Bid/Ask Tick; Buy/Cover Orders - Two Ask ticks must print within your stop price to trigger your stop. Sell/Short Orders - Two Bid ticks must print within your stop price to trigger your stop.
        /// * TAB - Twice Ask/Bid Tick; Buy/Cover Orders - Two Bid ticks must print within your stop price to trigger your stop. Sell/Short Orders - Two Ask ticks must print within your stop price to trigger your stop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ActivationTriggerDefinitionKey Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActivationTriggerDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActivationTriggerDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Quote stream object used in quote/changes and quote/snapshots</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class QuoteStreamDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _ask;
        private double? _askSize;
        private string _askType;
        private QuoteStreamDefinitionAssetType? _assetType;
        private double? _bid;
        private double? _bidSize;
        private double? _close;
        private string _countryCode;
        private QuoteStreamDefinitionCurrency? _currency;
        private double? _dailyOpenInterest;
        private string _dataFeed;
        private string _description;
        private double? _displayType;
        private string _error;
        private string _exchange;
        private double? _high;
        private double? _high52Week;
        private string _high52WeekTimeStamp;
        private bool? _isDelayed;
        private double? _last;
        private double? _low;
        private double? _low52Week;
        private string _low52WeekTimeStamp;
        private double? _minMove;
        private string _nameExt;
        private double? _netChange;
        private double? _netChangePct;
        private double? _open;
        private double? _pointValue;
        private double? _previousClose;
        private double? _previousVolume;
        private System.Collections.ObjectModel.ObservableCollection<string> _restrictions;
        private double? _strikePrice;
        private string _symbol;
        private string _symbolRoot;
        private double? _tickSizeTier;
        private DateTime _tradeTime;
        private string _underlying;
        private double? _volume;

        /// <summary>The price at which a security, futures contract, or other financial instrument is offered for sale.</summary>
        [Newtonsoft.Json.JsonProperty("Ask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ask
        {
            get { return _ask; }
            set
            {
                if (_ask != value)
                {
                    _ask = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of trading units that prospective sellers are prepared to sell.</summary>
        [Newtonsoft.Json.JsonProperty("AskSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AskSize
        {
            get { return _askSize; }
            set
            {
                if (_askSize != value)
                {
                    _askSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Japan Only) Quote Type.</summary>
        [Newtonsoft.Json.JsonProperty("AskType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string AskType
        {
            get { return _askType; }
            set
            {
                if (_askType != value)
                {
                    _askType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuoteStreamDefinitionAssetType? AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Bid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bid
        {
            get { return _bid; }
            set
            {
                if (_bid != value)
                {
                    _bid = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of shares/contracts at the current bid price.</summary>
        [Newtonsoft.Json.JsonProperty("BidSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BidSize
        {
            get { return _bidSize; }
            set
            {
                if (_bidSize != value)
                {
                    _bidSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Daily running close price.</summary>
        [Newtonsoft.Json.JsonProperty("Close", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Close
        {
            get { return _close; }
            set
            {
                if (_close != value)
                {
                    _close = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string CountryCode
        {
            get { return _countryCode; }
            set
            {
                if (_countryCode != value)
                {
                    _countryCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuoteStreamDefinitionCurrency? Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of open contracts.</summary>
        [Newtonsoft.Json.JsonProperty("DailyOpenInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyOpenInterest
        {
            get { return _dailyOpenInterest; }
            set
            {
                if (_dailyOpenInterest != value)
                {
                    _dailyOpenInterest = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The data quote feed provider.</summary>
        [Newtonsoft.Json.JsonProperty("DataFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string DataFeed
        {
            get { return _dataFeed; }
            set
            {
                if (_dataFeed != value)
                {
                    _dataFeed = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol's price display type based on the following list:
        /// 
        /// * `0` "Automatic" Not used
        /// * `1` 0 Decimals => 1
        /// * `2` 1 Decimals => .1
        /// * `3` 2 Decimals => .01
        /// * `4` 3 Decimals => .001
        /// * `5` 4 Decimals => .0001
        /// * `6` 5 Decimals => .00001
        /// * `7` Simplest Fraction
        /// * `8` 1/2-Halves => .5
        /// * `9` 1/4-Fourths => .25
        /// * `10` 1/8-Eights => .125
        /// * `11` 1/16-Sixteenths => .0625
        /// * `12` 1/32-ThirtySeconds => .03125
        /// * `13` 1/64-SixtyFourths => .015625
        /// * `14` 1/128-OneTwentyEigths => .0078125
        /// * `15` 1/256-TwoFiftySixths => .003906250
        /// * `16` 10ths and Quarters => .025
        /// * `17` 32nds and Halves => .015625
        /// * `18` 32nds and Quarters => .0078125
        /// * `19` 32nds and Eights => .00390625
        /// * `20` 32nds and Tenths => .003125
        /// * `21` 64ths and Halves => .0078125
        /// * `22` 64ths and Tenths => .0015625
        /// * `23` 6 Decimals => .000001
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisplayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisplayType
        {
            get { return _displayType; }
            set
            {
                if (_displayType != value)
                {
                    _displayType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Error message received from exchange or Tradestation.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price of the day.</summary>
        [Newtonsoft.Json.JsonProperty("High", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? High
        {
            get { return _high; }
            set
            {
                if (_high != value)
                {
                    _high = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price of the past 52 weeks. This is a grid-based indicator.</summary>
        [Newtonsoft.Json.JsonProperty("High52Week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? High52Week
        {
            get { return _high52Week; }
            set
            {
                if (_high52Week != value)
                {
                    _high52Week = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date and time of the highest price in the past 52 week.</summary>
        [Newtonsoft.Json.JsonProperty("High52WeekTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string High52WeekTimeStamp
        {
            get { return _high52WeekTimeStamp; }
            set
            {
                if (_high52WeekTimeStamp != value)
                {
                    _high52WeekTimeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>True if the quote is a delayed quote and False if the quote is a real-time quote.</summary>
        [Newtonsoft.Json.JsonProperty("IsDelayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDelayed
        {
            get { return _isDelayed; }
            set
            {
                if (_isDelayed != value)
                {
                    _isDelayed = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The last price for a symbol sent by the exchange.</summary>
        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Last
        {
            get { return _last; }
            set
            {
                if (_last != value)
                {
                    _last = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The lowest price of the day.</summary>
        [Newtonsoft.Json.JsonProperty("Low", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Low
        {
            get { return _low; }
            set
            {
                if (_low != value)
                {
                    _low = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>52 week low price.</summary>
        [Newtonsoft.Json.JsonProperty("Low52Week", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Low52Week
        {
            get { return _low52Week; }
            set
            {
                if (_low52Week != value)
                {
                    _low52Week = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date and time of the highest price in the past 52 week.</summary>
        [Newtonsoft.Json.JsonProperty("Low52WeekTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Low52WeekTimeStamp
        {
            get { return _low52WeekTimeStamp; }
            set
            {
                if (_low52WeekTimeStamp != value)
                {
                    _low52WeekTimeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Multiplying factor using the display type to determine the minimum price increment the asset trades in.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>If the Quote is delayed this property will be set to `D`.</summary>
        [Newtonsoft.Json.JsonProperty("NameExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameExt
        {
            get { return _nameExt; }
            set
            {
                if (_nameExt != value)
                {
                    _nameExt = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Net change price difference.</summary>
        [Newtonsoft.Json.JsonProperty("NetChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetChange
        {
            get { return _netChange; }
            set
            {
                if (_netChange != value)
                {
                    _netChange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Net percent change from previous day`s close.</summary>
        [Newtonsoft.Json.JsonProperty("NetChangePct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetChangePct
        {
            get { return _netChangePct; }
            set
            {
                if (_netChangePct != value)
                {
                    _netChangePct = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Today`s opening price</summary>
        [Newtonsoft.Json.JsonProperty("Open", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Open
        {
            get { return _open; }
            set
            {
                if (_open != value)
                {
                    _open = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol`s point value</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Close of the previous trading period.</summary>
        [Newtonsoft.Json.JsonProperty("PreviousClose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PreviousClose
        {
            get { return _previousClose; }
            set
            {
                if (_previousClose != value)
                {
                    _previousClose = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Previous day`s trading volume.</summary>
        [Newtonsoft.Json.JsonProperty("PreviousVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PreviousVolume
        {
            get { return _previousVolume; }
            set
            {
                if (_previousVolume != value)
                {
                    _previousVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Japan Only) A symbol specific restrictions.</summary>
        [Newtonsoft.Json.JsonProperty("Restrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Restrictions
        {
            get { return _restrictions; }
            set
            {
                if (_restrictions != value)
                {
                    _restrictions = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Strike price for the option; This is for Options symbols only.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol name.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The symbol used to identify the option`s financial instrument for a specific underlying asset that is traded on the various trading exchanges.</summary>
        [Newtonsoft.Json.JsonProperty("SymbolRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string SymbolRoot
        {
            get { return _symbolRoot; }
            set
            {
                if (_symbolRoot != value)
                {
                    _symbolRoot = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Trading increment based on a level group.</summary>
        [Newtonsoft.Json.JsonProperty("TickSizeTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TickSizeTier
        {
            get { return _tickSizeTier; }
            set
            {
                if (_tickSizeTier != value)
                {
                    _tickSizeTier = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Time of the last trade in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("TradeTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTime TradeTime
        {
            get { return _tradeTime; }
            set
            {
                if (_tradeTime != value)
                {
                    _tradeTime = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The financial instrument on which an option contract is based or derived.</summary>
        [Newtonsoft.Json.JsonProperty("Underlying", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Underlying
        {
            get { return _underlying; }
            set
            {
                if (_underlying != value)
                {
                    _underlying = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Today`s volume</summary>
        [Newtonsoft.Json.JsonProperty("Volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume
        {
            get { return _volume; }
            set
            {
                if (_volume != value)
                {
                    _volume = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static QuoteStreamDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QuoteStreamDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Standard barchart data object for streaming barchart data with stream/barchart/...</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BarchartDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private double _close;
        private double _downTicks;
        private double _downVolume;
        private double _high;
        private double _low;
        private double _open;
        private double _openInterest;
        private StatusDefinition _status = new StatusDefinition();
        private string _timeStamp;
        private double _totalTicks;
        private double _totalVolume;
        private double _unchangedTicks;
        private double _unchangedVolume;
        private double _upTicks;
        private double _upVolume;

        /// <summary>Close price of current bar.</summary>
        [Newtonsoft.Json.JsonProperty("Close", Required = Newtonsoft.Json.Required.Default)]
        public double Close
        {
            get { return _close; }
            set
            {
                if (_close != value)
                {
                    _close = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A trade made at a price less than the previous trade price or at a price equal to the previous trade price..</summary>
        [Newtonsoft.Json.JsonProperty("DownTicks", Required = Newtonsoft.Json.Required.Default)]
        public double DownTicks
        {
            get { return _downTicks; }
            set
            {
                if (_downTicks != value)
                {
                    _downTicks = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The volume of securities with a current price that is below the previous day`s close</summary>
        [Newtonsoft.Json.JsonProperty("DownVolume", Required = Newtonsoft.Json.Required.Default)]
        public double DownVolume
        {
            get { return _downVolume; }
            set
            {
                if (_downVolume != value)
                {
                    _downVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>High price of current bar.</summary>
        [Newtonsoft.Json.JsonProperty("High", Required = Newtonsoft.Json.Required.Default)]
        public double High
        {
            get { return _high; }
            set
            {
                if (_high != value)
                {
                    _high = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Low price of current bar.</summary>
        [Newtonsoft.Json.JsonProperty("Low", Required = Newtonsoft.Json.Required.Default)]
        public double Low
        {
            get { return _low; }
            set
            {
                if (_low != value)
                {
                    _low = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Open price of current bar.</summary>
        [Newtonsoft.Json.JsonProperty("Open", Required = Newtonsoft.Json.Required.Default)]
        public double Open
        {
            get { return _open; }
            set
            {
                if (_open != value)
                {
                    _open = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of open contracts.</summary>
        [Newtonsoft.Json.JsonProperty("OpenInterest", Required = Newtonsoft.Json.Required.Default)]
        public double OpenInterest
        {
            get { return _openInterest; }
            set
            {
                if (_openInterest != value)
                {
                    _openInterest = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public StatusDefinition Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Epoch timestamp.</summary>
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Total number of ticks (upticks and downticks together).</summary>
        [Newtonsoft.Json.JsonProperty("TotalTicks", Required = Newtonsoft.Json.Required.Default)]
        public double TotalTicks
        {
            get { return _totalTicks; }
            set
            {
                if (_totalTicks != value)
                {
                    _totalTicks = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total volume of all securities trading on a specific exchange.</summary>
        [Newtonsoft.Json.JsonProperty("TotalVolume", Required = Newtonsoft.Json.Required.Default)]
        public double TotalVolume
        {
            get { return _totalVolume; }
            set
            {
                if (_totalVolume != value)
                {
                    _totalVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of securities with a current price that is the same as the previous day`s close</summary>
        [Newtonsoft.Json.JsonProperty("UnchangedTicks", Required = Newtonsoft.Json.Required.Default)]
        public double UnchangedTicks
        {
            get { return _unchangedTicks; }
            set
            {
                if (_unchangedTicks != value)
                {
                    _unchangedTicks = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The volume of securities with a current price that is the same as the previous day`s close.</summary>
        [Newtonsoft.Json.JsonProperty("UnchangedVolume", Required = Newtonsoft.Json.Required.Default)]
        public double UnchangedVolume
        {
            get { return _unchangedVolume; }
            set
            {
                if (_unchangedVolume != value)
                {
                    _unchangedVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A trade made at a price greater than the previous trade price, or at a price equal to the previous trade price.</summary>
        [Newtonsoft.Json.JsonProperty("UpTicks", Required = Newtonsoft.Json.Required.Default)]
        public double UpTicks
        {
            get { return _upTicks; }
            set
            {
                if (_upTicks != value)
                {
                    _upTicks = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The volume of securities with a current price that is above the previous day`s close.</summary>
        [Newtonsoft.Json.JsonProperty("UpVolume", Required = Newtonsoft.Json.Required.Default)]
        public double UpVolume
        {
            get { return _upVolume; }
            set
            {
                if (_upVolume != value)
                {
                    _upVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BarchartDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BarchartDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Status value for Barcharts and Tickbars. Integer value represeting values through bit mappings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StatusDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private int _bit0;
        private int _bit1;
        private int _bit2;
        private int _bit3;
        private int _bit4;
        private int _bit5;
        private int _bit6;
        private int _bit7;
        private int _bit8;
        private int _bit19;
        private int _bit23;
        private int _bit24;
        private int _bit25;
        private int _bit26;
        private int _bit27;
        private int _bit28;
        private int _bit29;

        /// <summary>`NEW`: Set on the first time the bar is sent</summary>
        [Newtonsoft.Json.JsonProperty("bit0", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit0
        {
            get { return _bit0; }
            set
            {
                if (_bit0 != value)
                {
                    _bit0 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`REAL_TIME_DATA`: Set when there is data in the bar and the data is being built in "real time"" from a trade</summary>
        [Newtonsoft.Json.JsonProperty("bit1", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit1
        {
            get { return _bit1; }
            set
            {
                if (_bit1 != value)
                {
                    _bit1 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`HISTORICAL_DATA`: Set when there is data in the bar and the data is historical data, or is built from historical data</summary>
        [Newtonsoft.Json.JsonProperty("bit2", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit2
        {
            get { return _bit2; }
            set
            {
                if (_bit2 != value)
                {
                    _bit2 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`STANDARD_CLOSE`: Set when the bar is closed "normally" (e.g. a 2 tick tickchart bar was closed because of the second tick, a 10-min barchart was closed due to time, etc.)</summary>
        [Newtonsoft.Json.JsonProperty("bit3", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit3
        {
            get { return _bit3; }
            set
            {
                if (_bit3 != value)
                {
                    _bit3 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`END_OF_SESSION_CLOSE`: Set when the bar was closed "prematurely" due to the end of the trading session and the particular bar type is not meant to span trading sessions</summary>
        [Newtonsoft.Json.JsonProperty("bit4", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit4
        {
            get { return _bit4; }
            set
            {
                if (_bit4 != value)
                {
                    _bit4 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`UPDATE_CORPACTION`: Set when there was an update due to corporate action</summary>
        [Newtonsoft.Json.JsonProperty("bit5", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit5
        {
            get { return _bit5; }
            set
            {
                if (_bit5 != value)
                {
                    _bit5 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`UPDATE_CORRECTION`:</summary>
        [Newtonsoft.Json.JsonProperty("bit6", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit6
        {
            get { return _bit6; }
            set
            {
                if (_bit6 != value)
                {
                    _bit6 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`ANALYSIS_BAR`: Set when the bar should not be considered except for analysis purposes</summary>
        [Newtonsoft.Json.JsonProperty("bit7", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit7
        {
            get { return _bit7; }
            set
            {
                if (_bit7 != value)
                {
                    _bit7 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`EXTENDED_BAR`</summary>
        [Newtonsoft.Json.JsonProperty("bit8", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit8
        {
            get { return _bit8; }
            set
            {
                if (_bit8 != value)
                {
                    _bit8 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`PREV_DAY_CORRECTION`</summary>
        [Newtonsoft.Json.JsonProperty("bit19", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit19
        {
            get { return _bit19; }
            set
            {
                if (_bit19 != value)
                {
                    _bit19 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`AFTER_MARKET_CORRECTION`</summary>
        [Newtonsoft.Json.JsonProperty("bit23", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit23
        {
            get { return _bit23; }
            set
            {
                if (_bit23 != value)
                {
                    _bit23 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`PHANTOM_BAR`: Set when the bar is synthetic - thus created only to fill gaps</summary>
        [Newtonsoft.Json.JsonProperty("bit24", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit24
        {
            get { return _bit24; }
            set
            {
                if (_bit24 != value)
                {
                    _bit24 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`EMPTY_BAR`</summary>
        [Newtonsoft.Json.JsonProperty("bit25", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit25
        {
            get { return _bit25; }
            set
            {
                if (_bit25 != value)
                {
                    _bit25 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`BACKFILL_DATA`</summary>
        [Newtonsoft.Json.JsonProperty("bit26", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit26
        {
            get { return _bit26; }
            set
            {
                if (_bit26 != value)
                {
                    _bit26 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`ARCHIVE_DATA`</summary>
        [Newtonsoft.Json.JsonProperty("bit27", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit27
        {
            get { return _bit27; }
            set
            {
                if (_bit27 != value)
                {
                    _bit27 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`GHOST_BAR`: Set when the bar is empty but specifically for the end session</summary>
        [Newtonsoft.Json.JsonProperty("bit28", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit28
        {
            get { return _bit28; }
            set
            {
                if (_bit28 != value)
                {
                    _bit28 = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>`END_OF_HISTORY_STREAM`: Set when the bar returned is the last bar in the requested history span</summary>
        [Newtonsoft.Json.JsonProperty("bit29", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public int Bit29
        {
            get { return _bit29; }
            set
            {
                if (_bit29 != value)
                {
                    _bit29 = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StatusDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Standard tickbar data object for streaming tick bars with stream/tickbars/...</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TickbarDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private double _close;
        private StatusDefinition _status = new StatusDefinition();
        private string _timeStamp;
        private double _totalVolume;

        /// <summary>Close price of current bar.</summary>
        [Newtonsoft.Json.JsonProperty("Close", Required = Newtonsoft.Json.Required.Default)]
        public double Close
        {
            get { return _close; }
            set
            {
                if (_close != value)
                {
                    _close = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public StatusDefinition Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Epoch timestamp.</summary>
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total volume of all securities trading on a specific exchange.</summary>
        [Newtonsoft.Json.JsonProperty("TotalVolume", Required = Newtonsoft.Json.Required.Default)]
        public double TotalVolume
        {
            get { return _totalVolume; }
            set
            {
                if (_totalVolume != value)
                {
                    _totalVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TickbarDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TickbarDefinition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>a header with the value of `Chunked` must be passed to streaming resources</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TransferEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = "Chunked")]
        Chunked = 0,

    }

    /// <summary>United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SessionTemplate
    {
        [System.Runtime.Serialization.EnumMember(Value = "USEQPre")]
        USEQPre = 0,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPost")]
        USEQPost = 1,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPreAndPost")]
        USEQPreAndPost = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 3,

    }

    /// <summary>Unit of time for each bar interval.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 3,

    }

    /// <summary>United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SessionTemplate2
    {
        [System.Runtime.Serialization.EnumMember(Value = "USEQPre")]
        USEQPre = 0,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPost")]
        USEQPost = 1,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPreAndPost")]
        USEQPreAndPost = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 3,

    }

    /// <summary>Unit of time for each bar interval.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Unit2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 3,

    }

    /// <summary>United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SessionTemplate3
    {
        [System.Runtime.Serialization.EnumMember(Value = "USEQPre")]
        USEQPre = 0,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPost")]
        USEQPost = 1,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPreAndPost")]
        USEQPreAndPost = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 3,

    }

    /// <summary>Unit of time for each bar interval.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Unit3
    {
        [System.Runtime.Serialization.EnumMember(Value = "Minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 3,

    }

    /// <summary>United States (US) stock market session templates, that extend bars returned to include those outside of the regular trading session. Ignored for non-US equity symbols.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SessionTemplate4
    {
        [System.Runtime.Serialization.EnumMember(Value = "USEQPre")]
        USEQPre = 0,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPost")]
        USEQPost = 1,

        [System.Runtime.Serialization.EnumMember(Value = "USEQPreAndPost")]
        USEQPreAndPost = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Default")]
        Default = 3,

    }

    /// <summary>Unit of time for each bar interval.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Unit4
    {
        [System.Runtime.Serialization.EnumMember(Value = "Minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged
    {
        private string _category;
        private Country _country;
        private Currency _currency;
        private string _description;
        private string _error;
        private string _exchange;
        private double _exchangeID;
        private string _expirationDate;
        private string _expirationType;
        private string _futureType;
        private string _industryCode;
        private string _industryName;
        private double _lotSize;
        private double _minMove;
        private string _name;
        private string _optionType;
        private double _pointValue;
        private string _root;
        private string _sectorName;
        private double _strikePrice;

        /// <summary>The type of financial instrument that the symbol represents, such as a stock, index, or mutual fund.</summary>
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of base currency for the selected symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Element that references error.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique numerical identifier for the Exchange.</summary>
        [Newtonsoft.Json.JsonProperty("ExchangeID", Required = Newtonsoft.Json.Required.Default)]
        public double ExchangeID
        {
            get { return _exchangeID; }
            set
            {
                if (_exchangeID != value)
                {
                    _exchangeID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the expiration date for a futures or options contract in UTC formatted time.</summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ExpirationDate
        {
            get { return _expirationDate; }
            set
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For options only. It indicates whether the option is a monthly, weekly, quarterly or end of month expiration.
        /// * W - Weekly
        /// * M - Monthly
        /// * Q - Quartely
        /// * E - End of the month
        /// * "" - The term not be identified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationType
        {
            get { return _expirationType; }
            set
            {
                if (_expirationType != value)
                {
                    _expirationType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of future contract the symbol represents.</summary>
        [Newtonsoft.Json.JsonProperty("FutureType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FutureType
        {
            get { return _futureType; }
            set
            {
                if (_futureType != value)
                {
                    _futureType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays a digit code that categorize companies by the type of business activities they engage in.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryCode
        {
            get { return _industryCode; }
            set
            {
                if (_industryCode != value)
                {
                    _industryCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the Reuters assigned industry name to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryName
        {
            get { return _industryName; }
            set
            {
                if (_industryName != value)
                {
                    _industryName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The currency amount associated with a lot (contract) in the specified account.</summary>
        [Newtonsoft.Json.JsonProperty("LotSize", Required = Newtonsoft.Json.Required.Default)]
        public double LotSize
        {
            get { return _lotSize; }
            set
            {
                if (_lotSize != value)
                {
                    _lotSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The smallest amount of price change allowed for a particular symbol. This value is expressed in terms of Price Scale increments.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default)]
        public double MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique series of letters assigned to a security for trading purposes.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of options contract the symbol represents. Valid options include: Puts, Calls.</summary>
        [Newtonsoft.Json.JsonProperty("OptionType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OptionType
        {
            get { return _optionType; }
            set
            {
                if (_optionType != value)
                {
                    _optionType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol`s point value.</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default)]
        public double PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the symbol of the stock on the stock exchange.</summary>
        [Newtonsoft.Json.JsonProperty("Root", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Root
        {
            get { return _root; }
            set
            {
                if (_root != value)
                {
                    _root = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the assigned economic sector to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("SectorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectorName
        {
            get { return _sectorName; }
            set
            {
                if (_sectorName != value)
                {
                    _sectorName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays strike price of an options contract; For Options symbols only.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _category;
        private Country2 _country;
        private Currency2 _currency;
        private string _description;
        private string _error;
        private string _exchange;
        private double _exchangeID;
        private DateTime? _expirationDate;
        private string _expirationType;
        private string _futureType;
        private string _industryCode;
        private string _industryName;
        private double _lotSize;
        private double _minMove;
        private string _name;
        private string _optionType;
        private double _pointValue;
        private string _root;
        private string _sectorName;
        private double _strikePrice;

        /// <summary>The type of financial instrument that the symbol represents, such as a stock, index, or mutual fund.</summary>
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country2 Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of base currency for the selected symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency2 Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Element that references error.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique numerical identifier for the Exchange.</summary>
        [Newtonsoft.Json.JsonProperty("ExchangeID", Required = Newtonsoft.Json.Required.Default)]
        public double ExchangeID
        {
            get { return _exchangeID; }
            set
            {
                if (_exchangeID != value)
                {
                    _exchangeID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the expiration date for a futures or options contract in UTC formatted time.</summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public DateTime? ExpirationDate
        {
            get { return _expirationDate; }
            set
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For options only. It indicates whether the option is a monthly, weekly, quarterly or end of month expiration.
        /// * W - Weekly
        /// * M - Monthly
        /// * Q - Quartely
        /// * E - End of the month
        /// * "" - The term not be identified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationType
        {
            get { return _expirationType; }
            set
            {
                if (_expirationType != value)
                {
                    _expirationType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of future contract the symbol represents.</summary>
        [Newtonsoft.Json.JsonProperty("FutureType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FutureType
        {
            get { return _futureType; }
            set
            {
                if (_futureType != value)
                {
                    _futureType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays a digit code that categorize companies by the type of business activities they engage in.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryCode
        {
            get { return _industryCode; }
            set
            {
                if (_industryCode != value)
                {
                    _industryCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the Reuters assigned industry name to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("IndustryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryName
        {
            get { return _industryName; }
            set
            {
                if (_industryName != value)
                {
                    _industryName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The currency amount associated with a lot (contract) in the specified account.</summary>
        [Newtonsoft.Json.JsonProperty("LotSize", Required = Newtonsoft.Json.Required.Default)]
        public double LotSize
        {
            get { return _lotSize; }
            set
            {
                if (_lotSize != value)
                {
                    _lotSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The smallest amount of price change allowed for a particular symbol. This value is expressed in terms of Price Scale increments.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default)]
        public double MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique series of letters assigned to a security for trading purposes.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the type of options contract the symbol represents. Valid options include: Puts, Calls.</summary>
        [Newtonsoft.Json.JsonProperty("OptionType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OptionType
        {
            get { return _optionType; }
            set
            {
                if (_optionType != value)
                {
                    _optionType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol`s point value.</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default)]
        public double PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the symbol of the stock on the stock exchange.</summary>
        [Newtonsoft.Json.JsonProperty("Root", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Root
        {
            get { return _root; }
            set
            {
                if (_root != value)
                {
                    _root = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the assigned economic sector to which the equity symbol belongs.</summary>
        [Newtonsoft.Json.JsonProperty("SectorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectorName
        {
            get { return _sectorName; }
            set
            {
                if (_sectorName != value)
                {
                    _sectorName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays strike price of an options contract; For Options symbols only.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous3 : System.ComponentModel.INotifyPropertyChanged
    {
        private double _ask;
        private string _askPriceDisplay;
        private double _askSize;
        private AssetType _assetType;
        private double _bid;
        private string _bidPriceDisplay;
        private double _bidSize;
        private double _close;
        private string _closePriceDisplay;
        private string _countryCode;
        private Currency3 _currency;
        private double _dailyOpenInterest;
        private string _dataFeed;
        private string _description;
        private double _displayType;
        private string _error;
        private string _exchange;
        private bool _fractionalDisplay;
        private double _high;
        private double _high52Week;
        private string _high52WeekPriceDisplay;
        private string _high52WeekTimeStamp;
        private string _highPriceDisplay;
        private bool _isDelayed;
        private double _last;
        private string _lastPriceDisplay;
        private double _low;
        private double _low52Week;
        private string _low52WeekPriceDisplay;
        private string _low52WeekTimeStamp;
        private string _lowPriceDisplay;
        private double _minMove;
        private string _nameExt;
        private double _netChange;
        private double _netChangePct;
        private double _open;
        private string _openPriceDisplay;
        private double _pointValue;
        private double _previousClose;
        private string _previousClosePriceDisplay;
        private double _previousVolume;
        private System.Collections.ObjectModel.ObservableCollection<string> _restrictions = new System.Collections.ObjectModel.ObservableCollection<string>();
        private double _strikePrice;
        private string _strikePriceDisplay;
        private string _symbol;
        private string _symbolRoot;
        private double _tickSizeTier;
        private string _tradeTime;
        private string _underlying;
        private double _volume;

        /// <summary>The price at which a security, futures contract, or other financial instrument is offered for sale.</summary>
        [Newtonsoft.Json.JsonProperty("Ask", Required = Newtonsoft.Json.Required.Default)]
        public double Ask
        {
            get { return _ask; }
            set
            {
                if (_ask != value)
                {
                    _ask = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Ask price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("AskPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AskPriceDisplay
        {
            get { return _askPriceDisplay; }
            set
            {
                if (_askPriceDisplay != value)
                {
                    _askPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of trading units that prospective sellers are prepared to sell.</summary>
        [Newtonsoft.Json.JsonProperty("AskSize", Required = Newtonsoft.Json.Required.Default)]
        public double AskSize
        {
            get { return _askSize; }
            set
            {
                if (_askSize != value)
                {
                    _askSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The name of asset type for a symbol</summary>
        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetType AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Bid", Required = Newtonsoft.Json.Required.Default)]
        public double Bid
        {
            get { return _bid; }
            set
            {
                if (_bid != value)
                {
                    _bid = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Bid price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("BidPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BidPriceDisplay
        {
            get { return _bidPriceDisplay; }
            set
            {
                if (_bidPriceDisplay != value)
                {
                    _bidPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of trading units that prospective buyers are prepared to purchase for a symbol.</summary>
        [Newtonsoft.Json.JsonProperty("BidSize", Required = Newtonsoft.Json.Required.Default)]
        public double BidSize
        {
            get { return _bidSize; }
            set
            {
                if (_bidSize != value)
                {
                    _bidSize = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The net Realized Profit or Loss denominated in the symbol currency for the current trading session. This value includes any gain or loss as a result of closing a position during the current trading session</summary>
        [Newtonsoft.Json.JsonProperty("Close", Required = Newtonsoft.Json.Required.Default)]
        public double Close
        {
            get { return _close; }
            set
            {
                if (_close != value)
                {
                    _close = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Daily running close price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("ClosePriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClosePriceDisplay
        {
            get { return _closePriceDisplay; }
            set
            {
                if (_closePriceDisplay != value)
                {
                    _closePriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CountryCode
        {
            get { return _countryCode; }
            set
            {
                if (_countryCode != value)
                {
                    _countryCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency3 Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total number of open or outstanding (not closed or delivered) options and/or futures contracts that exist on a given day, delivered on a particular day.</summary>
        [Newtonsoft.Json.JsonProperty("DailyOpenInterest", Required = Newtonsoft.Json.Required.Default)]
        public double DailyOpenInterest
        {
            get { return _dailyOpenInterest; }
            set
            {
                if (_dailyOpenInterest != value)
                {
                    _dailyOpenInterest = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The data quote feed provider.</summary>
        [Newtonsoft.Json.JsonProperty("DataFeed", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DataFeed
        {
            get { return _dataFeed; }
            set
            {
                if (_dataFeed != value)
                {
                    _dataFeed = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol's price display type based on the following list:
        /// 
        /// * `0` "Automatic" Not used
        /// * `1` 0 Decimals => 1
        /// * `2` 1 Decimals => .1
        /// * `3` 2 Decimals => .01
        /// * `4` 3 Decimals => .001
        /// * `5` 4 Decimals => .0001
        /// * `6` 5 Decimals => .00001
        /// * `7` Simplest Fraction
        /// * `8` 1/2-Halves => .5
        /// * `9` 1/4-Fourths => .25
        /// * `10` 1/8-Eights => .125
        /// * `11` 1/16-Sixteenths => .0625
        /// * `12` 1/32-ThirtySeconds => .03125
        /// * `13` 1/64-SixtyFourths => .015625
        /// * `14` 1/128-OneTwentyEigths => .0078125
        /// * `15` 1/256-TwoFiftySixths => .003906250
        /// * `16` 10ths and Quarters => .025
        /// * `17` 32nds and Halves => .015625
        /// * `18` 32nds and Quarters => .0078125
        /// * `19` 32nds and Eights => .00390625
        /// * `20` 32nds and Tenths => .003125
        /// * `21` 64ths and Halves => .0078125
        /// * `22` 64ths and Tenths => .0015625
        /// * `23` 6 Decimals => .000001
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisplayType", Required = Newtonsoft.Json.Required.Default)]
        public double DisplayType
        {
            get { return _displayType; }
            set
            {
                if (_displayType != value)
                {
                    _displayType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Error message received from exchange or Tradestation.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Determine whether fractional price display is required.</summary>
        [Newtonsoft.Json.JsonProperty("FractionalDisplay", Required = Newtonsoft.Json.Required.Default)]
        public bool FractionalDisplay
        {
            get { return _fractionalDisplay; }
            set
            {
                if (_fractionalDisplay != value)
                {
                    _fractionalDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Highest price of the day.</summary>
        [Newtonsoft.Json.JsonProperty("High", Required = Newtonsoft.Json.Required.Default)]
        public double High
        {
            get { return _high; }
            set
            {
                if (_high != value)
                {
                    _high = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price of the past 52 weeks. This is a grid-based indicator.</summary>
        [Newtonsoft.Json.JsonProperty("High52Week", Required = Newtonsoft.Json.Required.Default)]
        public double High52Week
        {
            get { return _high52Week; }
            set
            {
                if (_high52Week != value)
                {
                    _high52Week = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>High52Week price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("High52WeekPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string High52WeekPriceDisplay
        {
            get { return _high52WeekPriceDisplay; }
            set
            {
                if (_high52WeekPriceDisplay != value)
                {
                    _high52WeekPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date and time of the highest price in the past 52 week.</summary>
        [Newtonsoft.Json.JsonProperty("High52WeekTimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string High52WeekTimeStamp
        {
            get { return _high52WeekTimeStamp; }
            set
            {
                if (_high52WeekTimeStamp != value)
                {
                    _high52WeekTimeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>High price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("HighPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string HighPriceDisplay
        {
            get { return _highPriceDisplay; }
            set
            {
                if (_highPriceDisplay != value)
                {
                    _highPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>True if the quote is a delayed quote and False if the quote is a real-time quote</summary>
        [Newtonsoft.Json.JsonProperty("IsDelayed", Required = Newtonsoft.Json.Required.Default)]
        public bool IsDelayed
        {
            get { return _isDelayed; }
            set
            {
                if (_isDelayed != value)
                {
                    _isDelayed = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The last price at which the symbol traded.</summary>
        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default)]
        public double Last
        {
            get { return _last; }
            set
            {
                if (_last != value)
                {
                    _last = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Last price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("LastPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LastPriceDisplay
        {
            get { return _lastPriceDisplay; }
            set
            {
                if (_lastPriceDisplay != value)
                {
                    _lastPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Lowest price of stock.</summary>
        [Newtonsoft.Json.JsonProperty("Low", Required = Newtonsoft.Json.Required.Default)]
        public double Low
        {
            get { return _low; }
            set
            {
                if (_low != value)
                {
                    _low = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The lowest price of the past 52 weeks.</summary>
        [Newtonsoft.Json.JsonProperty("Low52Week", Required = Newtonsoft.Json.Required.Default)]
        public double Low52Week
        {
            get { return _low52Week; }
            set
            {
                if (_low52Week != value)
                {
                    _low52Week = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Low52Week price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("Low52WeekPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Low52WeekPriceDisplay
        {
            get { return _low52WeekPriceDisplay; }
            set
            {
                if (_low52WeekPriceDisplay != value)
                {
                    _low52WeekPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Date and time of the lowest price of the past 52 weeks.</summary>
        [Newtonsoft.Json.JsonProperty("Low52WeekTimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Low52WeekTimeStamp
        {
            get { return _low52WeekTimeStamp; }
            set
            {
                if (_low52WeekTimeStamp != value)
                {
                    _low52WeekTimeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Low price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("LowPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LowPriceDisplay
        {
            get { return _lowPriceDisplay; }
            set
            {
                if (_lowPriceDisplay != value)
                {
                    _lowPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The smallest amount of price change allowed for a particular symbol. This value is expressed in terms of Price Scale increments.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default)]
        public double MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>If the Quote is delayed this property will be set to `D`</summary>
        [Newtonsoft.Json.JsonProperty("NameExt", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NameExt
        {
            get { return _nameExt; }
            set
            {
                if (_nameExt != value)
                {
                    _nameExt = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The difference between the last displayed price and the previous day`s close.</summary>
        [Newtonsoft.Json.JsonProperty("NetChange", Required = Newtonsoft.Json.Required.Default)]
        public double NetChange
        {
            get { return _netChange; }
            set
            {
                if (_netChange != value)
                {
                    _netChange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The difference between the current price and the previous day`s close, expressed in a percentage.</summary>
        [Newtonsoft.Json.JsonProperty("NetChangePct", Required = Newtonsoft.Json.Required.Default)]
        public double NetChangePct
        {
            get { return _netChangePct; }
            set
            {
                if (_netChangePct != value)
                {
                    _netChangePct = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The unrealized profit or loss denominated in the symbol currency on the position held, calculated based on the average price of the position.</summary>
        [Newtonsoft.Json.JsonProperty("Open", Required = Newtonsoft.Json.Required.Default)]
        public double Open
        {
            get { return _open; }
            set
            {
                if (_open != value)
                {
                    _open = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Open price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("OpenPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OpenPriceDisplay
        {
            get { return _openPriceDisplay; }
            set
            {
                if (_openPriceDisplay != value)
                {
                    _openPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The currency value represented by a full point of price movement. In the case of stocks, the Big Point Value is usually 1, in that 1 point of movement represents 1 dollar, however it may vary.</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default)]
        public double PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The closing price of the previous day.</summary>
        [Newtonsoft.Json.JsonProperty("PreviousClose", Required = Newtonsoft.Json.Required.Default)]
        public double PreviousClose
        {
            get { return _previousClose; }
            set
            {
                if (_previousClose != value)
                {
                    _previousClose = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>PreviousClose price formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("PreviousClosePriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PreviousClosePriceDisplay
        {
            get { return _previousClosePriceDisplay; }
            set
            {
                if (_previousClosePriceDisplay != value)
                {
                    _previousClosePriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Daily volume of the previous day.</summary>
        [Newtonsoft.Json.JsonProperty("PreviousVolume", Required = Newtonsoft.Json.Required.Default)]
        public double PreviousVolume
        {
            get { return _previousVolume; }
            set
            {
                if (_previousVolume != value)
                {
                    _previousVolume = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A symbol specific restrictions for Japanese equities.</summary>
        [Newtonsoft.Json.JsonProperty("Restrictions", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> Restrictions
        {
            get { return _restrictions; }
            set
            {
                if (_restrictions != value)
                {
                    _restrictions = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The price at which the underlying contract will be delivered in the event an option is exercised.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>StrikePrice formatted for display.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StrikePriceDisplay
        {
            get { return _strikePriceDisplay; }
            set
            {
                if (_strikePriceDisplay != value)
                {
                    _strikePriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The name identifying the financial instrument for which the data is displayed.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The symbol used to identify the option`s financial instrument for a specific underlying asset that is traded on the various trading exchanges.</summary>
        [Newtonsoft.Json.JsonProperty("SymbolRoot", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SymbolRoot
        {
            get { return _symbolRoot; }
            set
            {
                if (_symbolRoot != value)
                {
                    _symbolRoot = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Trading increment based on a level group.</summary>
        [Newtonsoft.Json.JsonProperty("TickSizeTier", Required = Newtonsoft.Json.Required.Default)]
        public double TickSizeTier
        {
            get { return _tickSizeTier; }
            set
            {
                if (_tickSizeTier != value)
                {
                    _tickSizeTier = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Trade execution time.</summary>
        [Newtonsoft.Json.JsonProperty("TradeTime", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TradeTime
        {
            get { return _tradeTime; }
            set
            {
                if (_tradeTime != value)
                {
                    _tradeTime = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The financial instrument on which an option contract is based or derived.</summary>
        [Newtonsoft.Json.JsonProperty("Underlying", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Underlying
        {
            get { return _underlying; }
            set
            {
                if (_underlying != value)
                {
                    _underlying = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The number of shares or contracts traded in a security or an entire market during a given period of time.</summary>
        [Newtonsoft.Json.JsonProperty("Volume", Required = Newtonsoft.Json.Required.Default)]
        public double Volume
        {
            get { return _volume; }
            set
            {
                if (_volume != value)
                {
                    _volume = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous3>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous4 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _description;
        private string _exchange;
        private string _name;

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of exchange where this symbol is traded in.</summary>
        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Exchange
        {
            get { return _exchange; }
            set
            {
                if (_exchange != value)
                {
                    _exchange = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique series of letters assigned to a security for trading purposes.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous4>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous5 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _alias;
        private string _altId;
        private string _displayName;
        private bool _isStockLocateEligible;
        private double _key;
        private string _name;
        private string _type;
        private TypeDescription _typeDescription;

        /// <summary>User defined name.</summary>
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Alias
        {
            get { return _alias; }
            set
            {
                if (_alias != value)
                {
                    _alias = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>TradeStation Alternate ID.</summary>
        [Newtonsoft.Json.JsonProperty("AltId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltId
        {
            get { return _altId; }
            set
            {
                if (_altId != value)
                {
                    _altId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set to Alternate ID if it exists otherwise will be the TradeStation Account ID</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>True if this account is stock locate eligible; otherwise, false.</summary>
        [Newtonsoft.Json.JsonProperty("IsStockLocateEligible", Required = Newtonsoft.Json.Required.Default)]
        public bool IsStockLocateEligible
        {
            get { return _isStockLocateEligible; }
            set
            {
                if (_isStockLocateEligible != value)
                {
                    _isStockLocateEligible = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Account Identifier.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default)]
        public double Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Account Name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Type of the account:
        /// 
        /// * `C` Cash
        /// * `M` Margin
        /// * `F` Futures
        /// * `D` DVP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of the type of the account.</summary>
        [Newtonsoft.Json.JsonProperty("TypeDescription", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeDescription TypeDescription
        {
            get { return _typeDescription; }
            set
            {
                if (_typeDescription != value)
                {
                    _typeDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous5>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous6 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _alias;
        private double? _bODAccountBalance;
        private double? _bODDayTradingMarginableEquitiesBuyingPower;
        private double _bODEquity;
        private double _bODNetCash;
        private double _bODOpenTradeEquity;
        private double? _bODOptionBuyingPower;
        private double? _bODOptionValue;
        private double? _bODOvernightBuyingPower;
        private bool? _canDayTrade;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous13> _closedPositions = new System.Collections.ObjectModel.ObservableCollection<Anonymous13>();
        private double _commission;
        private double? _dayTrades;
        private bool? _dayTradingQualified;
        private string _currency;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous14> _currencyDetails = new System.Collections.ObjectModel.ObservableCollection<Anonymous14>();
        private string _displayName;
        private double _key;
        private double _marketValue;
        private string _name;
        private double? _optionApprovalLevel;
        private double _openOrderMargin;
        private bool? _patternDayTrader;
        private double _realTimeAccountBalance;
        private double _realTimeBuyingPower;
        private double? _realTimeCostOfPositions;
        private double? _realTimeDayTradingMarginableEquitiesBuyingPower;
        private double _realTimeEquity;
        private double _realTimeInitialMargin;
        private double? _realTimeOptionBuyingPower;
        private double? _realTimeOptionValue;
        private double? _realTimeOvernightBuyingPower;
        private double _realTimeMaintenanceMargin;
        private double _realTimeRealizedProfitLoss;
        private double _realTimeTradeEquity;
        private double _realTimeUnrealizedGains;
        private double _realTimeUnrealizedProfitLoss;
        private double _securityOnDeposit;
        private Status _status;
        private string _statusDescription;
        private double _todayRealTimeTradeEquity;
        private Type _type;
        private string _typeDescription;
        private double _unclearedDeposit;
        private double? _unsettledFund;

        /// <summary>TradeStation only field.  A user can assign an Alias to an account so as to more easily identify an account. This will display instead of the standard 8 digit account number.</summary>
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Alias
        {
            get { return _alias; }
            set
            {
                if (_alias != value)
                {
                    _alias = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates the dollar amount of cash in the specified account at the beginning of the day.</summary>
        [Newtonsoft.Json.JsonProperty("BODAccountBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BODAccountBalance
        {
            get { return _bODAccountBalance; }
            set
            {
                if (_bODAccountBalance != value)
                {
                    _bODAccountBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The Intraday Buying Power (Day Trading Rule 431) with which the account started the trading day.</summary>
        [Newtonsoft.Json.JsonProperty("BODDayTradingMarginableEquitiesBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BODDayTradingMarginableEquitiesBuyingPower
        {
            get { return _bODDayTradingMarginableEquitiesBuyingPower; }
            set
            {
                if (_bODDayTradingMarginableEquitiesBuyingPower != value)
                {
                    _bODDayTradingMarginableEquitiesBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Equity for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("BODEquity", Required = Newtonsoft.Json.Required.Default)]
        public double BODEquity
        {
            get { return _bODEquity; }
            set
            {
                if (_bODEquity != value)
                {
                    _bODEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The dollar amount in the specified account calculated in real-time.</summary>
        [Newtonsoft.Json.JsonProperty("BODNetCash", Required = Newtonsoft.Json.Required.Default)]
        public double BODNetCash
        {
            get { return _bODNetCash; }
            set
            {
                if (_bODNetCash != value)
                {
                    _bODNetCash = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) Indicates the dollar amount of Beginning Day Trade Equity for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("BODOpenTradeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double BODOpenTradeEquity
        {
            get { return _bODOpenTradeEquity; }
            set
            {
                if (_bODOpenTradeEquity != value)
                {
                    _bODOpenTradeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates the amount of option buying power with which you started the current trading day.</summary>
        [Newtonsoft.Json.JsonProperty("BODOptionBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BODOptionBuyingPower
        {
            get { return _bODOptionBuyingPower; }
            set
            {
                if (_bODOptionBuyingPower != value)
                {
                    _bODOptionBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The dollar amount of Beginning Day Liquidation Value at the start of the trading day.</summary>
        [Newtonsoft.Json.JsonProperty("BODOptionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BODOptionValue
        {
            get { return _bODOptionValue; }
            set
            {
                if (_bODOptionValue != value)
                {
                    _bODOptionValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates the Overnight Buying Power (Regulation T) with which your account started the current trading day.</summary>
        [Newtonsoft.Json.JsonProperty("BODOvernightBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BODOvernightBuyingPower
        {
            get { return _bODOvernightBuyingPower; }
            set
            {
                if (_bODOvernightBuyingPower != value)
                {
                    _bODOvernightBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates whether day trading is allowed in the account.</summary>
        [Newtonsoft.Json.JsonProperty("CanDayTrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDayTrade
        {
            get { return _canDayTrade; }
            set
            {
                if (_canDayTrade != value)
                {
                    _canDayTrade = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("ClosedPositions", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous13> ClosedPositions
        {
            get { return _closedPositions; }
            set
            {
                if (_closedPositions != value)
                {
                    _closedPositions = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The actual brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts.</summary>
        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default)]
        public double Commission
        {
            get { return _commission; }
            set
            {
                if (_commission != value)
                {
                    _commission = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The number of day trades placed in the account.</summary>
        [Newtonsoft.Json.JsonProperty("DayTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DayTrades
        {
            get { return _dayTrades; }
            set
            {
                if (_dayTrades != value)
                {
                    _dayTrades = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates if the account is qualified to day trade as per compliance suitability in TradeStation.</summary>
        [Newtonsoft.Json.JsonProperty("DayTradingQualified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DayTradingQualified
        {
            get { return _dayTradingQualified; }
            set
            {
                if (_dayTradingQualified != value)
                {
                    _dayTradingQualified = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) Currency details of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyDetails", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous14> CurrencyDetails
        {
            get { return _currencyDetails; }
            set
            {
                if (_currencyDetails != value)
                {
                    _currencyDetails = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The friendly name of the specific TradeStation account.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Key is the unique identifier for the requested account.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default)]
        public double Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the actual market value.</summary>
        [Newtonsoft.Json.JsonProperty("MarketValue", Required = Newtonsoft.Json.Required.Default)]
        public double MarketValue
        {
            get { return _marketValue; }
            set
            {
                if (_marketValue != value)
                {
                    _marketValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>name of the account.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates the option approval level.</summary>
        [Newtonsoft.Json.JsonProperty("OptionApprovalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OptionApprovalLevel
        {
            get { return _optionApprovalLevel; }
            set
            {
                if (_optionApprovalLevel != value)
                {
                    _optionApprovalLevel = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The dollar amount of Open Order Margin for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("OpenOrderMargin", Required = Newtonsoft.Json.Required.Default)]
        public double OpenOrderMargin
        {
            get { return _openOrderMargin; }
            set
            {
                if (_openOrderMargin != value)
                {
                    _openOrderMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates whether you are considered a pattern day trader. As per FINRA rules, you will be considered a pattern day trader if you trade 4 or more times in 5 business days and your day-trading activities are greater than 6 percent of your total trading activity for that same five-day period. A pattern day trader must maintain a minimum equity of $25,000 on any day that the customer day trades. If the account falls below the $25,000 requirement, the pattern day trader will not be permitted to day trade until the account is restored to the $25,000 minimum equity level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PatternDayTrader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PatternDayTrader
        {
            get { return _patternDayTrader; }
            set
            {
                if (_patternDayTrader != value)
                {
                    _patternDayTrader = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The dollar amount in the specified account calculated in real-time.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountBalance", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountBalance
        {
            get { return _realTimeAccountBalance; }
            set
            {
                if (_realTimeAccountBalance != value)
                {
                    _realTimeAccountBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time buying power.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeBuyingPower", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeBuyingPower
        {
            get { return _realTimeBuyingPower; }
            set
            {
                if (_realTimeBuyingPower != value)
                {
                    _realTimeBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Total real-time cost of all open positions. Positions are based on the actual entry price.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeCostOfPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealTimeCostOfPositions
        {
            get { return _realTimeCostOfPositions; }
            set
            {
                if (_realTimeCostOfPositions != value)
                {
                    _realTimeCostOfPositions = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The intraday buying power for trading marginable equities.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeDayTradingMarginableEquitiesBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealTimeDayTradingMarginableEquitiesBuyingPower
        {
            get { return _realTimeDayTradingMarginableEquitiesBuyingPower; }
            set
            {
                if (_realTimeDayTradingMarginableEquitiesBuyingPower != value)
                {
                    _realTimeDayTradingMarginableEquitiesBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Real-time cash balance) + (Market value of long positions) – (Market value of short positions)</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeEquity
        {
            get { return _realTimeEquity; }
            set
            {
                if (_realTimeEquity != value)
                {
                    _realTimeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) Sum (Initial Margins of all positions in the given account)</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeInitialMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeInitialMargin
        {
            get { return _realTimeInitialMargin; }
            set
            {
                if (_realTimeInitialMargin != value)
                {
                    _realTimeInitialMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The intraday buying power for options.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeOptionBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealTimeOptionBuyingPower
        {
            get { return _realTimeOptionBuyingPower; }
            set
            {
                if (_realTimeOptionBuyingPower != value)
                {
                    _realTimeOptionBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) The dollar amount of Real-time Liquidation Value calculated throughout the trading day.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeOptionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealTimeOptionValue
        {
            get { return _realTimeOptionValue; }
            set
            {
                if (_realTimeOptionValue != value)
                {
                    _realTimeOptionValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Indicates in real-time, the value of the account equity position changes.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeOvernightBuyingPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealTimeOvernightBuyingPower
        {
            get { return _realTimeOvernightBuyingPower; }
            set
            {
                if (_realTimeOvernightBuyingPower != value)
                {
                    _realTimeOvernightBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The dollar amount of Real-time Maintenance Margin for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeMaintenanceMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeMaintenanceMargin
        {
            get { return _realTimeMaintenanceMargin; }
            set
            {
                if (_realTimeMaintenanceMargin != value)
                {
                    _realTimeMaintenanceMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates any gain or loss as a result of closing a position during the current trading day. This value also includes all commissions and routing fees incurred during the current trading day.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeRealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeRealizedProfitLoss
        {
            get { return _realTimeRealizedProfitLoss; }
            set
            {
                if (_realTimeRealizedProfitLoss != value)
                {
                    _realTimeRealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The dollar amount of Real-time Trade Equity for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeTradeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeTradeEquity
        {
            get { return _realTimeTradeEquity; }
            set
            {
                if (_realTimeTradeEquity != value)
                {
                    _realTimeTradeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates in real-time, the unrealized gains for all currently open positions.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeUnrealizedGains", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeUnrealizedGains
        {
            get { return _realTimeUnrealizedGains; }
            set
            {
                if (_realTimeUnrealizedGains != value)
                {
                    _realTimeUnrealizedGains = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates in real-time, the unrealized profit or loss for all currently open positions.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeUnrealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeUnrealizedProfitLoss
        {
            get { return _realTimeUnrealizedProfitLoss; }
            set
            {
                if (_realTimeUnrealizedProfitLoss != value)
                {
                    _realTimeUnrealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The value of special securities that are deposited by the customer with the clearing firm for the sole purpose of increasing purchasing power in their trading account. This number will be reset daily by the account balances clearing file. The entire value of this field will increase purchasing power.</summary>
        [Newtonsoft.Json.JsonProperty("SecurityOnDeposit", Required = Newtonsoft.Json.Required.Default)]
        public double SecurityOnDeposit
        {
            get { return _securityOnDeposit; }
            set
            {
                if (_securityOnDeposit != value)
                {
                    _securityOnDeposit = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Status of a specific account.
        /// * A - Active
        /// * C - Closed
        /// * CTA - Closing Transaction Only
        /// * FMC - Fed Margin Call
        /// * I - Inactive
        /// * LTO - Liquidating Transactions Only
        /// * R - Restricted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for Status attribute.</summary>
        [Newtonsoft.Json.JsonProperty("StatusDescription", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StatusDescription
        {
            get { return _statusDescription; }
            set
            {
                if (_statusDescription != value)
                {
                    _statusDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Futures) The dollar amount of Today's Real-time Trade Equity for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("TodayRealTimeTradeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double TodayRealTimeTradeEquity
        {
            get { return _todayRealTimeTradeEquity; }
            set
            {
                if (_todayRealTimeTradeEquity != value)
                {
                    _todayRealTimeTradeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The type of the account.
        /// * C - Cash
        /// * M - Margin
        /// * D - DVP
        /// * F - Futures
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for Type Attribute.</summary>
        [Newtonsoft.Json.JsonProperty("TypeDescription", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TypeDescription
        {
            get { return _typeDescription; }
            set
            {
                if (_typeDescription != value)
                {
                    _typeDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total of uncleared checks received by TradeStation for deposit.</summary>
        [Newtonsoft.Json.JsonProperty("UnclearedDeposit", Required = Newtonsoft.Json.Required.Default)]
        public double UnclearedDeposit
        {
            get { return _unclearedDeposit; }
            set
            {
                if (_unclearedDeposit != value)
                {
                    _unclearedDeposit = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>(Equities) Funds received by TradeStation that are not settled from a transaction in the account.</summary>
        [Newtonsoft.Json.JsonProperty("UnsettledFund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnsettledFund
        {
            get { return _unsettledFund; }
            set
            {
                if (_unsettledFund != value)
                {
                    _unsettledFund = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous6>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous7 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accountID;
        private double _accountMarketValue;
        private double _accountOpenProfitLoss;
        private double _accountTotalCost;
        private string _alias;
        private double _askPrice;
        private string _askPriceDisplay;
        private AssetType2 _assetType;
        private double _averagePrice;
        private string _averagePriceDisplay;
        private double _bidPrice;
        private string _bidPriceDisplay;
        private double _bigPointValue;
        private string _contractExpireDate;
        private double _conversionRate;
        private string _country;
        private string _currency;
        private string _description;
        private string _displayName;
        private double _initialMargin;
        private double _key;
        private double _lastPrice;
        private string _lastPriceDisplay;
        private LongShort _longShort;
        private double _maintenanceMargin;
        private double _marketValue;
        private double _openProfitLoss;
        private double _openProfitLossPercent;
        private double _openProfitLossQty;
        private double _quantity;
        private double _requiredMargin;
        private double _settlePrice;
        private double _strikePrice;
        private string _strikePriceDisplay;
        private string _symbol;
        private string _timeStamp;
        private double _totalCost;

        /// <summary>Internal ID for the TradeStation account that is being used for a particular order.</summary>
        [Newtonsoft.Json.JsonProperty("AccountID", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountID
        {
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    _accountID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The actual market value denominated in the account currency of the open position.</summary>
        [Newtonsoft.Json.JsonProperty("AccountMarketValue", Required = Newtonsoft.Json.Required.Default)]
        public double AccountMarketValue
        {
            get { return _accountMarketValue; }
            set
            {
                if (_accountMarketValue != value)
                {
                    _accountMarketValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The unrealized profit or loss denominated in the account currency on the position held, calculated based on the average price of the position.</summary>
        [Newtonsoft.Json.JsonProperty("AccountOpenProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double AccountOpenProfitLoss
        {
            get { return _accountOpenProfitLoss; }
            set
            {
                if (_accountOpenProfitLoss != value)
                {
                    _accountOpenProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total cost denominated in the account currency of the open position.</summary>
        [Newtonsoft.Json.JsonProperty("AccountTotalCost", Required = Newtonsoft.Json.Required.Default)]
        public double AccountTotalCost
        {
            get { return _accountTotalCost; }
            set
            {
                if (_accountTotalCost != value)
                {
                    _accountTotalCost = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>TradeStation only field. A user can assign an Alias to an account so as to more easily identify an account. This will display instead of the standard 8 digit account number.</summary>
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Alias
        {
            get { return _alias; }
            set
            {
                if (_alias != value)
                {
                    _alias = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The price at which a security, futures contract, or other financial instrument is offered for sale.</summary>
        [Newtonsoft.Json.JsonProperty("AskPrice", Required = Newtonsoft.Json.Required.Default)]
        public double AskPrice
        {
            get { return _askPrice; }
            set
            {
                if (_askPrice != value)
                {
                    _askPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Formatted text representation of the AskPrice for easy display</summary>
        [Newtonsoft.Json.JsonProperty("AskPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AskPriceDisplay
        {
            get { return _askPriceDisplay; }
            set
            {
                if (_askPriceDisplay != value)
                {
                    _askPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the asset type of the position
        /// * EQ - Equity
        /// * OP - Option
        /// * Fu - Future
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetType2 AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Average price of all positions for the current symbol.</summary>
        [Newtonsoft.Json.JsonProperty("AveragePrice", Required = Newtonsoft.Json.Required.Default)]
        public double AveragePrice
        {
            get { return _averagePrice; }
            set
            {
                if (_averagePrice != value)
                {
                    _averagePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for AveragePrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("AveragePriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AveragePriceDisplay
        {
            get { return _averagePriceDisplay; }
            set
            {
                if (_averagePriceDisplay != value)
                {
                    _averagePriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.</summary>
        [Newtonsoft.Json.JsonProperty("BidPrice", Required = Newtonsoft.Json.Required.Default)]
        public double BidPrice
        {
            get { return _bidPrice; }
            set
            {
                if (_bidPrice != value)
                {
                    _bidPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Formatted text representation of the BidPrice for easy display</summary>
        [Newtonsoft.Json.JsonProperty("BidPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BidPriceDisplay
        {
            get { return _bidPriceDisplay; }
            set
            {
                if (_bidPriceDisplay != value)
                {
                    _bidPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Dollar value for a one point movement.</summary>
        [Newtonsoft.Json.JsonProperty("BigPointValue", Required = Newtonsoft.Json.Required.Default)]
        public double BigPointValue
        {
            get { return _bigPointValue; }
            set
            {
                if (_bigPointValue != value)
                {
                    _bigPointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Contract expiration date for orders specified in contracts.</summary>
        [Newtonsoft.Json.JsonProperty("ContractExpireDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractExpireDate
        {
            get { return _contractExpireDate; }
            set
            {
                if (_contractExpireDate != value)
                {
                    _contractExpireDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The currency conversion rate that is used in order to convert from the currency of the symbol to the currency of the account.</summary>
        [Newtonsoft.Json.JsonProperty("ConversionRate", Required = Newtonsoft.Json.Required.Default)]
        public double ConversionRate
        {
            get { return _conversionRate; }
            set
            {
                if (_conversionRate != value)
                {
                    _conversionRate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of the exchange where the symbol is listed.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the full name of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The friendly name of the TradeStation account that is being used for a particular position.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The margin account balance denominated in the account currency required for entering a position on margin.</summary>
        [Newtonsoft.Json.JsonProperty("InitialMargin", Required = Newtonsoft.Json.Required.Default)]
        public double InitialMargin
        {
            get { return _initialMargin; }
            set
            {
                if (_initialMargin != value)
                {
                    _initialMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A unique identifier for the position.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default)]
        public double Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The last price at which the symbol traded.</summary>
        [Newtonsoft.Json.JsonProperty("LastPrice", Required = Newtonsoft.Json.Required.Default)]
        public double LastPrice
        {
            get { return _lastPrice; }
            set
            {
                if (_lastPrice != value)
                {
                    _lastPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Formatted text representation of the LastPrice for easy display</summary>
        [Newtonsoft.Json.JsonProperty("LastPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LastPriceDisplay
        {
            get { return _lastPriceDisplay; }
            set
            {
                if (_lastPriceDisplay != value)
                {
                    _lastPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Specifies if the position is Long or Short.
        /// * A Long position is when the holder buys an option to open a position, and where the number or price of options bought exceeds the number or price of options sold.
        /// * A Short position is when the writer sells an option to open a position, and where the number or price of options sold exceeds the number or price of options bought.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LongShort", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LongShort LongShort
        {
            get { return _longShort; }
            set
            {
                if (_longShort != value)
                {
                    _longShort = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The margin account balance denominated in the account currency required for maintaining a position on margin.</summary>
        [Newtonsoft.Json.JsonProperty("MaintenanceMargin", Required = Newtonsoft.Json.Required.Default)]
        public double MaintenanceMargin
        {
            get { return _maintenanceMargin; }
            set
            {
                if (_maintenanceMargin != value)
                {
                    _maintenanceMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The actual market value denominated in the symbol currency of the open position. This value is updated in real-time.</summary>
        [Newtonsoft.Json.JsonProperty("MarketValue", Required = Newtonsoft.Json.Required.Default)]
        public double MarketValue
        {
            get { return _marketValue; }
            set
            {
                if (_marketValue != value)
                {
                    _marketValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The unrealized profit or loss denominated in the symbol currency on the position held, calculated based on the average price of the position.</summary>
        [Newtonsoft.Json.JsonProperty("OpenProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double OpenProfitLoss
        {
            get { return _openProfitLoss; }
            set
            {
                if (_openProfitLoss != value)
                {
                    _openProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The unrealized profit or loss on the position expressed as a percentage of the initial value of the position.</summary>
        [Newtonsoft.Json.JsonProperty("OpenProfitLossPercent", Required = Newtonsoft.Json.Required.Default)]
        public double OpenProfitLossPercent
        {
            get { return _openProfitLossPercent; }
            set
            {
                if (_openProfitLossPercent != value)
                {
                    _openProfitLossPercent = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The unrealized profit or loss denominated in the account currency divided by the number of shares, contracts or units held.</summary>
        [Newtonsoft.Json.JsonProperty("OpenProfitLossQty", Required = Newtonsoft.Json.Required.Default)]
        public double OpenProfitLossQty
        {
            get { return _openProfitLossQty; }
            set
            {
                if (_openProfitLossQty != value)
                {
                    _openProfitLossQty = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The requested number of shares or contracts for a particular order.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        public double Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The margin account balance denominated in the account currency required for entering and maintaining a position on margin.</summary>
        [Newtonsoft.Json.JsonProperty("RequiredMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RequiredMargin
        {
            get { return _requiredMargin; }
            set
            {
                if (_requiredMargin != value)
                {
                    _requiredMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The average price at which a contract trades, calculated at both the open and close of each trading day, and it is important because it determines whether a trader is required to post additional margins.</summary>
        [Newtonsoft.Json.JsonProperty("SettlePrice", Required = Newtonsoft.Json.Required.Default)]
        public double SettlePrice
        {
            get { return _settlePrice; }
            set
            {
                if (_settlePrice != value)
                {
                    _settlePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The strike price is the stated price per share or per contract for which the underlying asset may be purchased, or sold, by the option holder upon exercise of the option contract.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Formatted text representation of the StrikePrice for easy display</summary>
        [Newtonsoft.Json.JsonProperty("StrikePriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StrikePriceDisplay
        {
            get { return _strikePriceDisplay; }
            set
            {
                if (_strikePriceDisplay != value)
                {
                    _strikePriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol of the current position.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Time the position was placed.</summary>
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The total cost denominated in the account currency of the open position.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCost", Required = Newtonsoft.Json.Required.Default)]
        public double TotalCost
        {
            get { return _totalCost; }
            set
            {
                if (_totalCost != value)
                {
                    _totalCost = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous7>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous8 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _accountID;
        private AdvancedOptions _advancedOptions;
        private string _alias;
        private AssetType3 _assetType;
        private double _commissionFee;
        private string _contractExpireDate;
        private double _conversionRate;
        private string _country;
        private string _denomination;
        private string _displayName;
        private double _displayType;
        private string _duration;
        private double _executeQuantity;
        private string _filledCanceled;
        private double _filledPrice;
        private string _filledPriceText;
        private string _groupName;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous15> _legs = new System.Collections.ObjectModel.ObservableCollection<Anonymous15>();
        private double _limitPrice;
        private string _limitPriceText;
        private System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> _marketActivationRules;
        private double _minMove;
        private double _orderID;
        private double _originator;
        private double _quantity;
        private double _quantityLeft;
        private string _rejectReason;
        private string _routing;
        private int? _showOnlyQuantity;
        private string _spread;
        private Status2 _status;
        private string _statusDescription;
        private double _stopPrice;
        private string _stopPriceText;
        private string _symbol;
        private System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> _timeActivationRules;
        private string _timeStamp;
        private TrailingStopDefinition _trailingStop;
        private string _triggeredBy;
        private Type2 _type;
        private double _unbundledRouteFee;

        /// <summary>ID that identifies a specific TradeStation account that is being used for a particular order.</summary>
        [Newtonsoft.Json.JsonProperty("AccountID", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountID
        {
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    _accountID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Will display a value when the order has advanced order rules associated with it or is part of a bracket order.</summary>
        [Newtonsoft.Json.JsonProperty("AdvancedOptions", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdvancedOptions AdvancedOptions
        {
            get { return _advancedOptions; }
            set
            {
                if (_advancedOptions != value)
                {
                    _advancedOptions = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>TradeStation only field.  A user can assign an Alias to an account so as to more easily identify an account. This will display instead of the standard 8 digit account number.</summary>
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Alias
        {
            get { return _alias; }
            set
            {
                if (_alias != value)
                {
                    _alias = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>* FU = Future
        /// * FO = Future Option
        /// * S = Stock
        /// * So = Stock Option
        /// * IDX = Index
        /// * CO = Currency Option
        /// * MMF = Money Market Fund
        /// * IO = Index Option
        /// * B = Bond
        /// * F = Forex
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetType3 AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value)
                {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Commission paid in an order.</summary>
        [Newtonsoft.Json.JsonProperty("CommissionFee", Required = Newtonsoft.Json.Required.Default)]
        public double CommissionFee
        {
            get { return _commissionFee; }
            set
            {
                if (_commissionFee != value)
                {
                    _commissionFee = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the contract expiration date for orders specified in contracts.</summary>
        [Newtonsoft.Json.JsonProperty("ContractExpireDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractExpireDate
        {
            get { return _contractExpireDate; }
            set
            {
                if (_contractExpireDate != value)
                {
                    _contractExpireDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Conversion rate used to translate the position’s market value and PNL from symbol currency to account currency.</summary>
        [Newtonsoft.Json.JsonProperty("ConversionRate", Required = Newtonsoft.Json.Required.Default)]
        public double ConversionRate
        {
            get { return _conversionRate; }
            set
            {
                if (_conversionRate != value)
                {
                    _conversionRate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The country of origin for the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Currency used to complete the order.</summary>
        [Newtonsoft.Json.JsonProperty("Denomination", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Denomination
        {
            get { return _denomination; }
            set
            {
                if (_denomination != value)
                {
                    _denomination = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Displays the Monex user ID. Used only by Monex.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of decimal points to display for the price.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayType", Required = Newtonsoft.Json.Required.Default)]
        public double DisplayType
        {
            get { return _displayType; }
            set
            {
                if (_displayType != value)
                {
                    _displayType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The amount of time for which an order is valid.</summary>
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Duration
        {
            get { return _duration; }
            set
            {
                if (_duration != value)
                {
                    _duration = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares that have been executed.</summary>
        [Newtonsoft.Json.JsonProperty("ExecuteQuantity", Required = Newtonsoft.Json.Required.Default)]
        public double ExecuteQuantity
        {
            get { return _executeQuantity; }
            set
            {
                if (_executeQuantity != value)
                {
                    _executeQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The time the order was filled or canceled.</summary>
        [Newtonsoft.Json.JsonProperty("FilledCanceled", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FilledCanceled
        {
            get { return _filledCanceled; }
            set
            {
                if (_filledCanceled != value)
                {
                    _filledCanceled = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>At the top level, this is the average fill price. For expanded levels, this is the actual execution price.</summary>
        [Newtonsoft.Json.JsonProperty("FilledPrice", Required = Newtonsoft.Json.Required.Default)]
        public double FilledPrice
        {
            get { return _filledPrice; }
            set
            {
                if (_filledPrice != value)
                {
                    _filledPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for FilledPrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("FilledPriceText", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FilledPriceText
        {
            get { return _filledPriceText; }
            set
            {
                if (_filledPriceText != value)
                {
                    _filledPriceText = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>It can be used to identify orders that are part of the same bracket.</summary>
        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string GroupName
        {
            get { return _groupName; }
            set
            {
                if (_groupName != value)
                {
                    _groupName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Legs", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous15> Legs
        {
            get { return _legs; }
            set
            {
                if (_legs != value)
                {
                    _legs = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The limit price for Limit orders.</summary>
        [Newtonsoft.Json.JsonProperty("LimitPrice", Required = Newtonsoft.Json.Required.Default)]
        public double LimitPrice
        {
            get { return _limitPrice; }
            set
            {
                if (_limitPrice != value)
                {
                    _limitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value of LimitPrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("LimitPriceText", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LimitPriceText
        {
            get { return _limitPriceText; }
            set
            {
                if (_limitPriceText != value)
                {
                    _limitPriceText = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of market-based activation rules that must be met before order is sent to the exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketActivationRuleDefinition> MarketActivationRules
        {
            get { return _marketActivationRules; }
            set
            {
                if (_marketActivationRules != value)
                {
                    _marketActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The smallest amount of price change allowed for a particular symbol.</summary>
        [Newtonsoft.Json.JsonProperty("MinMove", Required = Newtonsoft.Json.Required.Default)]
        public double MinMove
        {
            get { return _minMove; }
            set
            {
                if (_minMove != value)
                {
                    _minMove = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID of the current order.</summary>
        [Newtonsoft.Json.JsonProperty("OrderID", Required = Newtonsoft.Json.Required.Default)]
        public double OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    _orderID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Account name that generates the order.</summary>
        [Newtonsoft.Json.JsonProperty("Originator", Required = Newtonsoft.Json.Required.Default)]
        public double Originator
        {
            get { return _originator; }
            set
            {
                if (_originator != value)
                {
                    _originator = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Gets the quantity of shares or contracts requested for the order.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        public double Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Gets the number of unfilled shares or contracts for the current order.</summary>
        [Newtonsoft.Json.JsonProperty("QuantityLeft", Required = Newtonsoft.Json.Required.Default)]
        public double QuantityLeft
        {
            get { return _quantityLeft; }
            set
            {
                if (_quantityLeft != value)
                {
                    _quantityLeft = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>If an order has been rejected, this will display the rejection reason.</summary>
        [Newtonsoft.Json.JsonProperty("RejectReason", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Identifies the routing selection made by the customer when placing the order.</summary>
        [Newtonsoft.Json.JsonProperty("Routing", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Routing
        {
            get { return _routing; }
            set
            {
                if (_routing != value)
                {
                    _routing = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>This option allows you to hide the true number of shares that you wish to buy or sell.</summary>
        [Newtonsoft.Json.JsonProperty("ShowOnlyQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShowOnlyQuantity
        {
            get { return _showOnlyQuantity; }
            set
            {
                if (_showOnlyQuantity != value)
                {
                    _showOnlyQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The spread type for an option order.</summary>
        [Newtonsoft.Json.JsonProperty("Spread", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Spread
        {
            get { return _spread; }
            set
            {
                if (_spread != value)
                {
                    _spread = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>* OPN, ACK, UCN = Open Orders -- New order request pending, cancel request pending.
        /// * FLL, FLP = Filled Orders -- Partially-Filled and remaining canceled.
        /// * FPR = Partially Filled Orders.
        /// * OUT = Canceled Orders.
        /// * REJ, TSC = Rejected Orders -- It is an internal server(s) unsolicited cancel, not final status.
        /// * EXP = Expired Orders.
        /// * BRO = Broken Orders -- Not necessarily the order’s final status since later it may be reinstated to open.
        /// * CAN = Exch. Canceled Orders.
        /// * LAT = Too Late Orders -- Not the order’s final status.
        /// * DON = Queued Orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status2 Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description for Status attribute.</summary>
        [Newtonsoft.Json.JsonProperty("StatusDescription", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StatusDescription
        {
            get { return _statusDescription; }
            set
            {
                if (_statusDescription != value)
                {
                    _statusDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The stop price for stop orders.</summary>
        [Newtonsoft.Json.JsonProperty("StopPrice", Required = Newtonsoft.Json.Required.Default)]
        public double StopPrice
        {
            get { return _stopPrice; }
            set
            {
                if (_stopPrice != value)
                {
                    _stopPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for StopPrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("StopPriceText", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StopPriceText
        {
            get { return _stopPriceText; }
            set
            {
                if (_stopPriceText != value)
                {
                    _stopPriceText = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol to trade.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Set of time-based activation rules that must be met before order is sent to the exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TimeActivationRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TimeActivationRuleDefinition> TimeActivationRules
        {
            get { return _timeActivationRules; }
            set
            {
                if (_timeActivationRules != value)
                {
                    _timeActivationRules = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Time the order was placed.</summary>
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("TrailingStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrailingStopDefinition TrailingStop
        {
            get { return _trailingStop; }
            set
            {
                if (_trailingStop != value)
                {
                    _trailingStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Will display a value if a stop limit or stop market order has been triggered.</summary>
        [Newtonsoft.Json.JsonProperty("TriggeredBy", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TriggeredBy
        {
            get { return _triggeredBy; }
            set
            {
                if (_triggeredBy != value)
                {
                    _triggeredBy = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Type of order.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2 Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Will contain a value if the order has received a routing fee.</summary>
        [Newtonsoft.Json.JsonProperty("UnbundledRouteFee", Required = Newtonsoft.Json.Required.Default)]
        public double UnbundledRouteFee
        {
            get { return _unbundledRouteFee; }
            set
            {
                if (_unbundledRouteFee != value)
                {
                    _unbundledRouteFee = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous8>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ActivationTriggerDefinition> _activationTriggers;

        [Newtonsoft.Json.JsonProperty("ActivationTriggers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ActivationTriggerDefinition> ActivationTriggers
        {
            get { return _activationTriggers; }
            set
            {
                if (_activationTriggers != value)
                {
                    _activationTriggers = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BarchartError400Message
    {
        [System.Runtime.Serialization.EnumMember(Value = "Not a valid date.")]
        Not_a_valid_date_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Not a valid number.")]
        Not_a_valid_number_ = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BarchartError404Message
    {
        [System.Runtime.Serialization.EnumMember(Value = "INVALID SYMBOL")]
        INVALID_SYMBOL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Invalid bar interval quantity.")]
        Invalid_bar_interval_quantity_ = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Invalid bar interval unit.")]
        Invalid_bar_interval_unit_ = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Invalid start date.")]
        Invalid_start_date_ = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Invalid end date.")]
        Invalid_end_date_ = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Start date can not be earlier than 1/1/1900")]
        Start_date_can_not_be_earlier_than_1_1_1900 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "End date cannot be earlier than start date.")]
        End_date_cannot_be_earlier_than_start_date_ = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SymbolDefinitionCountry
    {
        [System.Runtime.Serialization.EnumMember(Value = "United States")]
        US = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DE")]
        DE = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CA")]
        CA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SymbolDefinitionCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = "USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DKK")]
        DKK = 4,

        [System.Runtime.Serialization.EnumMember(Value = "EUR")]
        EUR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBP")]
        DBP = 6,

        [System.Runtime.Serialization.EnumMember(Value = "HKD")]
        HKD = 7,

        [System.Runtime.Serialization.EnumMember(Value = "JPY")]
        JPY = 8,

        [System.Runtime.Serialization.EnumMember(Value = "NOK")]
        NOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NZD")]
        NZD = 10,

        [System.Runtime.Serialization.EnumMember(Value = "SEK")]
        SEK = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SGD")]
        SGD = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SymbolDefinitionExchange
    {
        [System.Runtime.Serialization.EnumMember(Value = "NYSE")]
        NYSE = 0,

        [System.Runtime.Serialization.EnumMember(Value = "NASDAQ")]
        NASDAQ = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OTC")]
        OTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = "OTCBB AMEX")]
        OTCBB_AMEX = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ARCX")]
        ARCX = 4,

        [System.Runtime.Serialization.EnumMember(Value = "NASDS")]
        NASDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = "EUREX")]
        EUREX = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ICE")]
        ICE = 7,

        [System.Runtime.Serialization.EnumMember(Value = "CME")]
        CME = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ONCH")]
        ONCH = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NYMEX")]
        NYMEX = 10,

        [System.Runtime.Serialization.EnumMember(Value = "CBOT")]
        CBOT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderConfirmRequestDefinitionAssetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "EQ")]
        EQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = "FU")]
        FU = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OP")]
        OP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderConfirmRequestDefinitionDuration
    {
        [System.Runtime.Serialization.EnumMember(Value = "DAY")]
        DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DYP")]
        DYP = 1,

        [System.Runtime.Serialization.EnumMember(Value = "GTC")]
        GTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GCP")]
        GCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = "GTD")]
        GTD = 4,

        [System.Runtime.Serialization.EnumMember(Value = "GDP")]
        GDP = 5,

        [System.Runtime.Serialization.EnumMember(Value = "OPG")]
        OPG = 6,

        [System.Runtime.Serialization.EnumMember(Value = "CLO")]
        CLO = 7,

        [System.Runtime.Serialization.EnumMember(Value = "IOC")]
        IOC = 8,

        [System.Runtime.Serialization.EnumMember(Value = "FOK")]
        FOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "1")]
        _1 = 10,

        [System.Runtime.Serialization.EnumMember(Value = "1 MIN")]
        _1_MIN = 11,

        [System.Runtime.Serialization.EnumMember(Value = "3")]
        _3 = 12,

        [System.Runtime.Serialization.EnumMember(Value = "3 MIN")]
        _3_MIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = "5")]
        _5 = 14,

        [System.Runtime.Serialization.EnumMember(Value = "5 MIN")]
        _5_MIN = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderConfirmRequestDefinitionOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Limit")]
        Limit = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Market")]
        Market = 1,

        [System.Runtime.Serialization.EnumMember(Value = "StopLimit")]
        StopLimit = 2,

        [System.Runtime.Serialization.EnumMember(Value = "StopMarket")]
        StopMarket = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderConfirmRequestDefinitionRoute
    {
        [System.Runtime.Serialization.EnumMember(Value = "Intelligent")]
        Intelligent = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AMEX")]
        AMEX = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ARCA")]
        ARCA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "AUTO")]
        AUTO = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BATS")]
        BATS = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BTRD")]
        BTRD = 5,

        [System.Runtime.Serialization.EnumMember(Value = "BYX")]
        BYX = 6,

        [System.Runtime.Serialization.EnumMember(Value = "CTDL")]
        CTDL = 7,

        [System.Runtime.Serialization.EnumMember(Value = "EDGA")]
        EDGA = 8,

        [System.Runtime.Serialization.EnumMember(Value = "EDGX")]
        EDGX = 9,

        [System.Runtime.Serialization.EnumMember(Value = "GFLO")]
        GFLO = 10,

        [System.Runtime.Serialization.EnumMember(Value = "MIXI")]
        MIXI = 11,

        [System.Runtime.Serialization.EnumMember(Value = "NITE")]
        NITE = 12,

        [System.Runtime.Serialization.EnumMember(Value = "NQBX")]
        NQBX = 13,

        [System.Runtime.Serialization.EnumMember(Value = "NSDQ")]
        NSDQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = "NYSE")]
        NYSE = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderConfirmRequestDefinitionTradeAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCOVER")]
        BUYTOCOVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SELLSHORT")]
        SELLSHORT = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOOPEN")]
        BUYTOOPEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCLOSE")]
        BUYTOCLOSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOOPEN")]
        SELLTOOPEN = 6,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOCLOSE")]
        SELLTOCLOSE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous9 : System.ComponentModel.INotifyPropertyChanged
    {
        private Type3 _type;
        private System.Collections.ObjectModel.ObservableCollection<OrderConfirmRequestDefinition> _orders;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type3 Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderConfirmRequestDefinition> Orders
        {
            get { return _orders; }
            set
            {
                if (_orders != value)
                {
                    _orders = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous9>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous10 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _symbol;
        private string _quantity;
        private TradeAction? _tradeAction;

        /// <summary>Must be UPPERCASE</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Conveys the intent of the trade
        /// * BUY - equity and futures trades
        /// * SELL - equity and futures trades
        /// * BUYTOCOVER - equity trade to close a short position
        /// * SELLSHORT - equity trade to open a short position
        /// * BUYTOOPEN - option trades
        /// * BUYTOCLOSE - option trades
        /// * SELLTOOPEN - option trades
        /// * SELLTOCLOSE - option trades
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TradeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeAction? TradeAction
        {
            get { return _tradeAction; }
            set
            {
                if (_tradeAction != value)
                {
                    _tradeAction = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous10>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderRequestDefinitionAssetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "EQ")]
        EQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = "FU")]
        FU = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OP")]
        OP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderRequestDefinitionDuration
    {
        [System.Runtime.Serialization.EnumMember(Value = "DAY")]
        DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DYP")]
        DYP = 1,

        [System.Runtime.Serialization.EnumMember(Value = "GTC")]
        GTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = "GCP")]
        GCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = "GTD")]
        GTD = 4,

        [System.Runtime.Serialization.EnumMember(Value = "GDP")]
        GDP = 5,

        [System.Runtime.Serialization.EnumMember(Value = "OPG")]
        OPG = 6,

        [System.Runtime.Serialization.EnumMember(Value = "CLO")]
        CLO = 7,

        [System.Runtime.Serialization.EnumMember(Value = "IOC")]
        IOC = 8,

        [System.Runtime.Serialization.EnumMember(Value = "FOK")]
        FOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "1")]
        _1 = 10,

        [System.Runtime.Serialization.EnumMember(Value = "1 MIN")]
        _1_MIN = 11,

        [System.Runtime.Serialization.EnumMember(Value = "3")]
        _3 = 12,

        [System.Runtime.Serialization.EnumMember(Value = "3 MIN")]
        _3_MIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = "5")]
        _5 = 14,

        [System.Runtime.Serialization.EnumMember(Value = "5 MIN")]
        _5_MIN = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderRequestDefinitionOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Limit")]
        Limit = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Market")]
        Market = 1,

        [System.Runtime.Serialization.EnumMember(Value = "StopLimit")]
        StopLimit = 2,

        [System.Runtime.Serialization.EnumMember(Value = "StopMarket")]
        StopMarket = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderRequestDefinitionRoute
    {
        [System.Runtime.Serialization.EnumMember(Value = "Intelligent")]
        Intelligent = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AMEX")]
        AMEX = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ARCA")]
        ARCA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "AUTO")]
        AUTO = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BATS")]
        BATS = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BTRD")]
        BTRD = 5,

        [System.Runtime.Serialization.EnumMember(Value = "BYX")]
        BYX = 6,

        [System.Runtime.Serialization.EnumMember(Value = "CTDL")]
        CTDL = 7,

        [System.Runtime.Serialization.EnumMember(Value = "EDGA")]
        EDGA = 8,

        [System.Runtime.Serialization.EnumMember(Value = "EDGX")]
        EDGX = 9,

        [System.Runtime.Serialization.EnumMember(Value = "GFLO")]
        GFLO = 10,

        [System.Runtime.Serialization.EnumMember(Value = "MIXI")]
        MIXI = 11,

        [System.Runtime.Serialization.EnumMember(Value = "NITE")]
        NITE = 12,

        [System.Runtime.Serialization.EnumMember(Value = "NQBX")]
        NQBX = 13,

        [System.Runtime.Serialization.EnumMember(Value = "NSDQ")]
        NSDQ = 14,

        [System.Runtime.Serialization.EnumMember(Value = "NYSE")]
        NYSE = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderRequestDefinitionTradeAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCOVER")]
        BUYTOCOVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SELLSHORT")]
        SELLSHORT = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOOPEN")]
        BUYTOOPEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCLOSE")]
        BUYTOCLOSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOOPEN")]
        SELLTOOPEN = 6,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOCLOSE")]
        SELLTOCLOSE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous11 : System.ComponentModel.INotifyPropertyChanged
    {
        private Type4 _type;
        private System.Collections.ObjectModel.ObservableCollection<OrderRequestDefinition> _orders;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type4 Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderRequestDefinition> Orders
        {
            get { return _orders; }
            set
            {
                if (_orders != value)
                {
                    _orders = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous11>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous12 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _symbol;
        private string _quantity;
        private TradeAction2? _tradeAction;

        /// <summary>Must be UPPERCASE</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Conveys the intent of the trade
        /// * BUY - equity and futures trades
        /// * SELL - equity and futures trades
        /// * BUYTOCOVER - equity trade to close a short position
        /// * SELLSHORT - equity trade to open a short position
        /// * BUYTOOPEN - option trades
        /// * BUYTOCLOSE - option trades
        /// * SELLTOOPEN - option trades
        /// * SELLTOCLOSE - option trades
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TradeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeAction2? TradeAction
        {
            get { return _tradeAction; }
            set
            {
                if (_tradeAction != value)
                {
                    _tradeAction = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous12>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MarketActivationRuleDefinitionRuleType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Price")]
        Price = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MarketActivationRuleDefinitionPredicate
    {
        [System.Runtime.Serialization.EnumMember(Value = "Lt")]
        Lt = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Lte")]
        Lte = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Gt")]
        Gt = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Gte")]
        Gte = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MarketActivationRuleDefinitionTriggerKey
    {
        [System.Runtime.Serialization.EnumMember(Value = "STT")]
        STT = 0,

        [System.Runtime.Serialization.EnumMember(Value = "STTN")]
        STTN = 1,

        [System.Runtime.Serialization.EnumMember(Value = "SBA")]
        SBA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SAB")]
        SAB = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DTT")]
        DTT = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DTTN")]
        DTTN = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBA")]
        DBA = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DAB")]
        DAB = 7,

        [System.Runtime.Serialization.EnumMember(Value = "TTT")]
        TTT = 8,

        [System.Runtime.Serialization.EnumMember(Value = "TTTN")]
        TTTN = 9,

        [System.Runtime.Serialization.EnumMember(Value = "TBA")]
        TBA = 10,

        [System.Runtime.Serialization.EnumMember(Value = "TAB")]
        TAB = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MarketActivationRuleDefinitionLogicOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "And")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Or")]
        Or = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupOrderConfirmRequestDefinitionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NORMAL")]
        NORMAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "OCO")]
        OCO = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BRK")]
        BRK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderResponseDefinitionOrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GroupOrderRequestDefinitionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NORMAL")]
        NORMAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "OCO")]
        OCO = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BRK")]
        BRK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ActivationTriggerDefinitionKey
    {
        [System.Runtime.Serialization.EnumMember(Value = "STT")]
        STT = 0,

        [System.Runtime.Serialization.EnumMember(Value = "STTN")]
        STTN = 1,

        [System.Runtime.Serialization.EnumMember(Value = "SBA")]
        SBA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SAB")]
        SAB = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DTT")]
        DTT = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DTTN")]
        DTTN = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBA")]
        DBA = 6,

        [System.Runtime.Serialization.EnumMember(Value = "DAB")]
        DAB = 7,

        [System.Runtime.Serialization.EnumMember(Value = "TTT")]
        TTT = 8,

        [System.Runtime.Serialization.EnumMember(Value = "TTTN")]
        TTTN = 9,

        [System.Runtime.Serialization.EnumMember(Value = "TBA")]
        TBA = 10,

        [System.Runtime.Serialization.EnumMember(Value = "TAB")]
        TAB = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QuoteStreamDefinitionAssetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "INDEX")]
        INDEX = 0,

        [System.Runtime.Serialization.EnumMember(Value = "STOCK")]
        STOCK = 1,

		[System.Runtime.Serialization.EnumMember(Value = "FUTURE")]
        FUTURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = "FOREX")]
        FOREX = 3,

        [System.Runtime.Serialization.EnumMember(Value = "UNKNOWN")]
        UNKNOWN = 4,

		[System.Runtime.Serialization.EnumMember(Value = "STOCKOPTION")]
		STOCKOPTION = 5
	}

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QuoteStreamDefinitionCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = "USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DKK")]
        DKK = 4,

        [System.Runtime.Serialization.EnumMember(Value = "EUR")]
        EUR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBP")]
        DBP = 6,

        [System.Runtime.Serialization.EnumMember(Value = "HKD")]
        HKD = 7,

        [System.Runtime.Serialization.EnumMember(Value = "JPY")]
        JPY = 8,

        [System.Runtime.Serialization.EnumMember(Value = "NOK")]
        NOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NZD")]
        NZD = 10,

        [System.Runtime.Serialization.EnumMember(Value = "SEK")]
        SEK = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SGD")]
        SGD = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Country
    {
        [System.Runtime.Serialization.EnumMember(Value = "US")]
        US = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DE")]
        DE = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CA")]
        CA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Currency
    {
        [System.Runtime.Serialization.EnumMember(Value = "USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DKK")]
        DKK = 4,

        [System.Runtime.Serialization.EnumMember(Value = "EUR")]
        EUR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBP")]
        DBP = 6,

        [System.Runtime.Serialization.EnumMember(Value = "HKD")]
        HKD = 7,

        [System.Runtime.Serialization.EnumMember(Value = "JPY")]
        JPY = 8,

        [System.Runtime.Serialization.EnumMember(Value = "NOK")]
        NOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NZD")]
        NZD = 10,

        [System.Runtime.Serialization.EnumMember(Value = "SEK")]
        SEK = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SGD")]
        SGD = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Country2
    {
        [System.Runtime.Serialization.EnumMember(Value = "United States")]
        US = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DE")]
        DE = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CA")]
        CA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Currency2
    {
        [System.Runtime.Serialization.EnumMember(Value = "USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DKK")]
        DKK = 4,

        [System.Runtime.Serialization.EnumMember(Value = "EUR")]
        EUR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBP")]
        DBP = 6,

        [System.Runtime.Serialization.EnumMember(Value = "HKD")]
        HKD = 7,

        [System.Runtime.Serialization.EnumMember(Value = "JPY")]
        JPY = 8,

        [System.Runtime.Serialization.EnumMember(Value = "NOK")]
        NOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NZD")]
        NZD = 10,

        [System.Runtime.Serialization.EnumMember(Value = "SEK")]
        SEK = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SGD")]
        SGD = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AssetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "INDEX")]
        INDEX = 0,

        [System.Runtime.Serialization.EnumMember(Value = "STOCK")]
        STOCK = 1,

        [System.Runtime.Serialization.EnumMember(Value = "FUTURE")]
        FUTURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = "FOREX")]
        FOREX = 3,

        [System.Runtime.Serialization.EnumMember(Value = "UNKNOWN")]
        UNKNOWN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Currency3
    {
        [System.Runtime.Serialization.EnumMember(Value = "USD")]
        USD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DKK")]
        DKK = 4,

        [System.Runtime.Serialization.EnumMember(Value = "EUR")]
        EUR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DBP")]
        DBP = 6,

        [System.Runtime.Serialization.EnumMember(Value = "HKD")]
        HKD = 7,

        [System.Runtime.Serialization.EnumMember(Value = "JPY")]
        JPY = 8,

        [System.Runtime.Serialization.EnumMember(Value = "NOK")]
        NOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = "NZD")]
        NZD = 10,

        [System.Runtime.Serialization.EnumMember(Value = "SEK")]
        SEK = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SGD")]
        SGD = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TypeDescription
    {
        [System.Runtime.Serialization.EnumMember(Value = "Cash")]
        Cash = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Margin")]
        Margin = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DVP")]
        DVP = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Futures")]
        Futures = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous13 : System.ComponentModel.INotifyPropertyChanged
    {
        private double _currency;
        private double _profit;
        private string _symbol;

        /// <summary>The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        public double Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>This value includes any gain or loss as a result of closing a position.</summary>
        [Newtonsoft.Json.JsonProperty("Profit", Required = Newtonsoft.Json.Required.Default)]
        public double Profit
        {
            get { return _profit; }
            set
            {
                if (_profit != value)
                {
                    _profit = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The name identifying the financial instrument for which the data is displayed.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous13>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous14 : System.ComponentModel.INotifyPropertyChanged
    {
        private double _accountOpenOrderInitMargin;
        private double _bODAccountCashBalance;
        private double _bODAccountOpenTradeEquity;
        private double _bODAccountSecurities;
        private double _bODCashBalance;
        private double _bODOpenTradeEquity;
        private double _bODSecurities;
        private double _commission;
        private string _currency;
        private double _openOrderInitMargin;
        private double _realTimeAccountCashBalance;
        private double _realTimeAccountInitMargin;
        private double _realTimeAccountMaintenanceMargin;
        private double _realTimeAccountMarginRequirement;
        private double _realTimeAccountRealizedProfitLoss;
        private double _realTimeAccountUnrealizedProfitLoss;
        private double _realTimeCashBalance;
        private double _realTimeInitMargin;
        private double _realTimeMaintenanceMargin;
        private double _realTimeRealizedProfitLoss;
        private double _realTimeUnrealizedProfitLoss;
        private double _toAccountConversionRate;
        private double _todayRealTimeUnrealizedProfitLoss;

        /// <summary>The margin account balance denominated in the account currency required for entering a position on margin.</summary>
        [Newtonsoft.Json.JsonProperty("AccountOpenOrderInitMargin", Required = Newtonsoft.Json.Required.Default)]
        public double AccountOpenOrderInitMargin
        {
            get { return _accountOpenOrderInitMargin; }
            set
            {
                if (_accountOpenOrderInitMargin != value)
                {
                    _accountOpenOrderInitMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Account Cash Balance.</summary>
        [Newtonsoft.Json.JsonProperty("BODAccountCashBalance", Required = Newtonsoft.Json.Required.Default)]
        public double BODAccountCashBalance
        {
            get { return _bODAccountCashBalance; }
            set
            {
                if (_bODAccountCashBalance != value)
                {
                    _bODAccountCashBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Trade Equity for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("BODAccountOpenTradeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double BODAccountOpenTradeEquity
        {
            get { return _bODAccountOpenTradeEquity; }
            set
            {
                if (_bODAccountOpenTradeEquity != value)
                {
                    _bODAccountOpenTradeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Account Securities.</summary>
        [Newtonsoft.Json.JsonProperty("BODAccountSecurities", Required = Newtonsoft.Json.Required.Default)]
        public double BODAccountSecurities
        {
            get { return _bODAccountSecurities; }
            set
            {
                if (_bODAccountSecurities != value)
                {
                    _bODAccountSecurities = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Cash Balance for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("BODCashBalance", Required = Newtonsoft.Json.Required.Default)]
        public double BODCashBalance
        {
            get { return _bODCashBalance; }
            set
            {
                if (_bODCashBalance != value)
                {
                    _bODCashBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Open Trade Equity.</summary>
        [Newtonsoft.Json.JsonProperty("BODOpenTradeEquity", Required = Newtonsoft.Json.Required.Default)]
        public double BODOpenTradeEquity
        {
            get { return _bODOpenTradeEquity; }
            set
            {
                if (_bODOpenTradeEquity != value)
                {
                    _bODOpenTradeEquity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the dollar amount of Beginning Day Securities.</summary>
        [Newtonsoft.Json.JsonProperty("BODSecurities", Required = Newtonsoft.Json.Required.Default)]
        public double BODSecurities
        {
            get { return _bODSecurities; }
            set
            {
                if (_bODSecurities != value)
                {
                    _bODSecurities = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The actual brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts.</summary>
        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default)]
        public double Commission
        {
            get { return _commission; }
            set
            {
                if (_commission != value)
                {
                    _commission = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The base currency of the symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency
        {
            get { return _currency; }
            set
            {
                if (_currency != value)
                {
                    _currency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The dollar amount of Open Order Initial Margin for the given futures account.</summary>
        [Newtonsoft.Json.JsonProperty("OpenOrderInitMargin", Required = Newtonsoft.Json.Required.Default)]
        public double OpenOrderInitMargin
        {
            get { return _openOrderInitMargin; }
            set
            {
                if (_openOrderInitMargin != value)
                {
                    _openOrderInitMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account cash balance.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountCashBalance", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountCashBalance
        {
            get { return _realTimeAccountCashBalance; }
            set
            {
                if (_realTimeAccountCashBalance != value)
                {
                    _realTimeAccountCashBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account initial margin.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountInitMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountInitMargin
        {
            get { return _realTimeAccountInitMargin; }
            set
            {
                if (_realTimeAccountInitMargin != value)
                {
                    _realTimeAccountInitMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account maintance margin.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountMaintenanceMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountMaintenanceMargin
        {
            get { return _realTimeAccountMaintenanceMargin; }
            set
            {
                if (_realTimeAccountMaintenanceMargin != value)
                {
                    _realTimeAccountMaintenanceMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account margin requirement.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountMarginRequirement", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountMarginRequirement
        {
            get { return _realTimeAccountMarginRequirement; }
            set
            {
                if (_realTimeAccountMarginRequirement != value)
                {
                    _realTimeAccountMarginRequirement = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account realized profit or loss.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountRealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountRealizedProfitLoss
        {
            get { return _realTimeAccountRealizedProfitLoss; }
            set
            {
                if (_realTimeAccountRealizedProfitLoss != value)
                {
                    _realTimeAccountRealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time account unrealized profit or loss.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeAccountUnrealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeAccountUnrealizedProfitLoss
        {
            get { return _realTimeAccountUnrealizedProfitLoss; }
            set
            {
                if (_realTimeAccountUnrealizedProfitLoss != value)
                {
                    _realTimeAccountUnrealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time cash balance.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeCashBalance", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeCashBalance
        {
            get { return _realTimeCashBalance; }
            set
            {
                if (_realTimeCashBalance != value)
                {
                    _realTimeCashBalance = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time initial margin.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeInitMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeInitMargin
        {
            get { return _realTimeInitMargin; }
            set
            {
                if (_realTimeInitMargin != value)
                {
                    _realTimeInitMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time maintance margin.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeMaintenanceMargin", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeMaintenanceMargin
        {
            get { return _realTimeMaintenanceMargin; }
            set
            {
                if (_realTimeMaintenanceMargin != value)
                {
                    _realTimeMaintenanceMargin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time realized profit or loss.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeRealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeRealizedProfitLoss
        {
            get { return _realTimeRealizedProfitLoss; }
            set
            {
                if (_realTimeRealizedProfitLoss != value)
                {
                    _realTimeRealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of real-time unrealized profit or loss.</summary>
        [Newtonsoft.Json.JsonProperty("RealTimeUnrealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double RealTimeUnrealizedProfitLoss
        {
            get { return _realTimeUnrealizedProfitLoss; }
            set
            {
                if (_realTimeUnrealizedProfitLoss != value)
                {
                    _realTimeUnrealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the rate used to convert from the currency of the symbol to the currency of the account.</summary>
        [Newtonsoft.Json.JsonProperty("ToAccountConversionRate", Required = Newtonsoft.Json.Required.Default)]
        public double ToAccountConversionRate
        {
            get { return _toAccountConversionRate; }
            set
            {
                if (_toAccountConversionRate != value)
                {
                    _toAccountConversionRate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicates the value of today's real-time unrealized profit or loss.</summary>
        [Newtonsoft.Json.JsonProperty("TodayRealTimeUnrealizedProfitLoss", Required = Newtonsoft.Json.Required.Default)]
        public double TodayRealTimeUnrealizedProfitLoss
        {
            get { return _todayRealTimeUnrealizedProfitLoss; }
            set
            {
                if (_todayRealTimeUnrealizedProfitLoss != value)
                {
                    _todayRealTimeUnrealizedProfitLoss = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous14>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = "A")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = "C")]
        C = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CTA")]
        CTA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "FMC")]
        FMC = 3,

        [System.Runtime.Serialization.EnumMember(Value = "I")]
        I = 4,

        [System.Runtime.Serialization.EnumMember(Value = "LTO")]
        LTO = 5,

        [System.Runtime.Serialization.EnumMember(Value = "R")]
        R = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "C")]
        C = 0,

        [System.Runtime.Serialization.EnumMember(Value = "M")]
        M = 1,

        [System.Runtime.Serialization.EnumMember(Value = "D")]
        D = 2,

        [System.Runtime.Serialization.EnumMember(Value = "F")]
        F = 3,

        [System.Runtime.Serialization.EnumMember(Value = "X")]
        X = 3
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AssetType2
    {
        [System.Runtime.Serialization.EnumMember(Value = "EQ")]
        EQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Op")]
        Op = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Fu")]
        Fu = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum LongShort
    {
        [System.Runtime.Serialization.EnumMember(Value = "Long")]
        Long = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Short")]
        Short = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AdvancedOptions
    {
        [System.Runtime.Serialization.EnumMember(Value = "")]
        Unkown = -1,

        [System.Runtime.Serialization.EnumMember(Value = "Activation Rule")]
        Activation_Rule = 0,

        [System.Runtime.Serialization.EnumMember(Value = "All or None")]
        All_or_None = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Trailing Stop")]
        Trailing_Stop = 2,

        [System.Runtime.Serialization.EnumMember(Value = "If Touched")]
        If_Touched = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Show Only")]
        Show_Only = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Discretionary")]
        Discretionary = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Non-Display")]
        NonDisplay = 6,

        [System.Runtime.Serialization.EnumMember(Value = "Peg")]
        Peg = 7,

        [System.Runtime.Serialization.EnumMember(Value = "Book Only")]
        Book_Only = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Add Liquidity")]
        Add_Liquidity = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AssetType3
    {
        [System.Runtime.Serialization.EnumMember(Value = "FU")]
        FU = 0,

        [System.Runtime.Serialization.EnumMember(Value = "FO")]
        FO = 1,

        [System.Runtime.Serialization.EnumMember(Value = "EQ")]
        EQ = 2,

        [System.Runtime.Serialization.EnumMember(Value = "S")]
        S = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SO")]
        SO = 3,

        [System.Runtime.Serialization.EnumMember(Value = "IDX")]
        IDX = 4,

        [System.Runtime.Serialization.EnumMember(Value = "CO")]
        CO = 5,

        [System.Runtime.Serialization.EnumMember(Value = "MMF")]
        MMF = 6,

        [System.Runtime.Serialization.EnumMember(Value = "IO")]
        IO = 7,

        [System.Runtime.Serialization.EnumMember(Value = "B")]
        B = 8,

        [System.Runtime.Serialization.EnumMember(Value = "F")]
        F = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous15 : System.ComponentModel.INotifyPropertyChanged
    {
        private double _ask;
        private string _baseSymbol;
        private double _bid;
        private double _execPrice;
        private double _execQuantity;
        private string _expireDate;
        private double _leaves;
        private double _legNumber;
        private double _limitPrice;
        private string _limitPriceDisplay;
        private double _month;
        private string _openOrClose;
        private double _orderID;
        private OrderType _orderType;
        private double _pointValue;
        private double _priceUsedForBuyingPower;
        private string _putOrCall;
        private double _quantity;
        private string _side;
        private double _stopPrice;
        private string _stopPriceDisplay;
        private double _strikePrice;
        private string _symbol;
        private string _timeExecuted;
        private Type2 _type;
        private double _year;

        /// <summary>The price at which a security, futures, or other financial instrument is offered for sale.</summary>
        [Newtonsoft.Json.JsonProperty("Ask", Required = Newtonsoft.Json.Required.Default)]
        public double Ask
        {
            get { return _ask; }
            set
            {
                if (_ask != value)
                {
                    _ask = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol of the underlying stock for an option trade.</summary>
        [Newtonsoft.Json.JsonProperty("BaseSymbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BaseSymbol
        {
            get { return _baseSymbol; }
            set
            {
                if (_baseSymbol != value)
                {
                    _baseSymbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol.</summary>
        [Newtonsoft.Json.JsonProperty("Bid", Required = Newtonsoft.Json.Required.Default)]
        public double Bid
        {
            get { return _bid; }
            set
            {
                if (_bid != value)
                {
                    _bid = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The execution price for the order.</summary>
        [Newtonsoft.Json.JsonProperty("ExecPrice", Required = Newtonsoft.Json.Required.Default)]
        public double ExecPrice
        {
            get { return _execPrice; }
            set
            {
                if (_execPrice != value)
                {
                    _execPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares executed.</summary>
        [Newtonsoft.Json.JsonProperty("ExecQuantity", Required = Newtonsoft.Json.Required.Default)]
        public double ExecQuantity
        {
            get { return _execQuantity; }
            set
            {
                if (_execQuantity != value)
                {
                    _execQuantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The expiration date of the future or option symbol.</summary>
        [Newtonsoft.Json.JsonProperty("ExpireDate", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ExpireDate
        {
            get { return _expireDate; }
            set
            {
                if (_expireDate != value)
                {
                    _expireDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>It will display the number of shares that have not yet filled if the entire quantity has not been filled.</summary>
        [Newtonsoft.Json.JsonProperty("Leaves", Required = Newtonsoft.Json.Required.Default)]
        public double Leaves
        {
            get { return _leaves; }
            set
            {
                if (_leaves != value)
                {
                    _leaves = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For an equity purchase, the value will be 1.  For option spreads, there will be a leg for each option.</summary>
        [Newtonsoft.Json.JsonProperty("LegNumber", Required = Newtonsoft.Json.Required.Default)]
        public double LegNumber
        {
            get { return _legNumber; }
            set
            {
                if (_legNumber != value)
                {
                    _legNumber = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The limit price for Limit orders</summary>
        [Newtonsoft.Json.JsonProperty("LimitPrice", Required = Newtonsoft.Json.Required.Default)]
        public double LimitPrice
        {
            get { return _limitPrice; }
            set
            {
                if (_limitPrice != value)
                {
                    _limitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for LimitPrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("LimitPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LimitPriceDisplay
        {
            get { return _limitPriceDisplay; }
            set
            {
                if (_limitPriceDisplay != value)
                {
                    _limitPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Expiration month for options or futures.</summary>
        [Newtonsoft.Json.JsonProperty("Month", Required = Newtonsoft.Json.Required.Default)]
        public double Month
        {
            get { return _month; }
            set
            {
                if (_month != value)
                {
                    _month = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Identifies whether the order is an Opening or Closing trade.</summary>
        [Newtonsoft.Json.JsonProperty("OpenOrClose", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OpenOrClose
        {
            get { return _openOrClose; }
            set
            {
                if (_openOrClose != value)
                {
                    _openOrClose = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID of the current order.</summary>
        [Newtonsoft.Json.JsonProperty("OrderID", Required = Newtonsoft.Json.Required.Default)]
        public double OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    _orderID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Identifies the order type of the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderType OrderType
        {
            get { return _orderType; }
            set
            {
                if (_orderType != value)
                {
                    _orderType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares the order represents. Equities will normally display 1. Options will display 100.</summary>
        [Newtonsoft.Json.JsonProperty("PointValue", Required = Newtonsoft.Json.Required.Default)]
        public double PointValue
        {
            get { return _pointValue; }
            set
            {
                if (_pointValue != value)
                {
                    _pointValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Price used for the buying power calculation of the order.</summary>
        [Newtonsoft.Json.JsonProperty("PriceUsedForBuyingPower", Required = Newtonsoft.Json.Required.Default)]
        public double PriceUsedForBuyingPower
        {
            get { return _priceUsedForBuyingPower; }
            set
            {
                if (_priceUsedForBuyingPower != value)
                {
                    _priceUsedForBuyingPower = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For an option order, identifies whether the order is for a Put or Call.</summary>
        [Newtonsoft.Json.JsonProperty("PutOrCall", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PutOrCall
        {
            get { return _putOrCall; }
            set
            {
                if (_putOrCall != value)
                {
                    _putOrCall = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of shares or contracts being purchased.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default)]
        public double Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Identifies whether the order is a buy or sell.</summary>
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Side
        {
            get { return _side; }
            set
            {
                if (_side != value)
                {
                    _side = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The stop price for stop orders.</summary>
        [Newtonsoft.Json.JsonProperty("StopPrice", Required = Newtonsoft.Json.Required.Default)]
        public double StopPrice
        {
            get { return _stopPrice; }
            set
            {
                if (_stopPrice != value)
                {
                    _stopPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>String value for StopPrice attribute.</summary>
        [Newtonsoft.Json.JsonProperty("StopPriceDisplay", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string StopPriceDisplay
        {
            get { return _stopPriceDisplay; }
            set
            {
                if (_stopPriceDisplay != value)
                {
                    _stopPriceDisplay = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>For an option order, the strike price for the Put or Call.</summary>
        [Newtonsoft.Json.JsonProperty("StrikePrice", Required = Newtonsoft.Json.Required.Default)]
        public double StrikePrice
        {
            get { return _strikePrice; }
            set
            {
                if (_strikePrice != value)
                {
                    _strikePrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Symbol to trade.</summary>
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    _symbol = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Time the order was placed.</summary>
        [Newtonsoft.Json.JsonProperty("TimeExecuted", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TimeExecuted
        {
            get { return _timeExecuted; }
            set
            {
                if (_timeExecuted != value)
                {
                    _timeExecuted = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Type of order</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2 Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Represents the expiration year if the order is an option.</summary>
        [Newtonsoft.Json.JsonProperty("Year", Required = Newtonsoft.Json.Required.Default)]
        public double Year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    _year = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous15>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Status2
    {
        [System.Runtime.Serialization.EnumMember(Value = "OPN")]
        OPN = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ACK")]
        ACK = 1,

        [System.Runtime.Serialization.EnumMember(Value = "UCN")]
        UCN = 2,

        [System.Runtime.Serialization.EnumMember(Value = "FLL")]
        FLL = 3,

        [System.Runtime.Serialization.EnumMember(Value = "FLP")]
        FLP = 4,

        [System.Runtime.Serialization.EnumMember(Value = "FPR")]
        FPR = 5,

        [System.Runtime.Serialization.EnumMember(Value = "OUT")]
        OUT = 6,

        [System.Runtime.Serialization.EnumMember(Value = "REJ")]
        REJ = 7,

        [System.Runtime.Serialization.EnumMember(Value = "TSC")]
        TSC = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Exp")]
        Exp = 9,

        [System.Runtime.Serialization.EnumMember(Value = "BRO")]
        BRO = 10,

        [System.Runtime.Serialization.EnumMember(Value = "CAN")]
        CAN = 11,

        [System.Runtime.Serialization.EnumMember(Value = "LAT")]
        LAT = 12,

        [System.Runtime.Serialization.EnumMember(Value = "DON")]
        DON = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Sell")]
        Sell = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Sell Short")]
        SellShort = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Buy")]
        Buy = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type3
    {
        [System.Runtime.Serialization.EnumMember(Value = "NORMAL")]
        NORMAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BRK")]
        BRK = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OCO")]
        OCO = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TradeAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCOVER")]
        BUYTOCOVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SELLSHORT")]
        SELLSHORT = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOOPEN")]
        BUYTOOPEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCLOSE")]
        BUYTOCLOSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOOPEN")]
        SELLTOOPEN = 6,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOCLOSE")]
        SELLTOCLOSE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type4
    {
        [System.Runtime.Serialization.EnumMember(Value = "NORMAL")]
        NORMAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BRK")]
        BRK = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OCO")]
        OCO = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TradeAction2
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCOVER")]
        BUYTOCOVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = "SELLSHORT")]
        SELLSHORT = 3,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOOPEN")]
        BUYTOOPEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = "BUYTOCLOSE")]
        BUYTOCLOSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOOPEN")]
        SELLTOOPEN = 6,

        [System.Runtime.Serialization.EnumMember(Value = "SELLTOCLOSE")]
        SELLTOCLOSE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Market")]
        Market = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Limit")]
        Limit = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Stop Limit")]
        Stop_Limit = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Stop Market")]
        Stop_Market = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.13.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.13.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}